{"ast":null,"code":"'use strict';\n\nmodule.exports = exports = _package;\nexports.usage = 'Packs binary (and enclosing directory) into locally staged tarball';\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar log = require('npmlog');\n\nvar versioning = require('./util/versioning.js');\n\nvar napi = require('./util/napi.js');\n\nvar existsAsync = fs.exists || path.exists;\n\nvar makeDir = require('make-dir');\n\nvar tar = require('tar');\n\nfunction readdirSync(dir) {\n  var list = [];\n  var files = fs.readdirSync(dir);\n  files.forEach(function (file) {\n    var stats = fs.lstatSync(path.join(dir, file));\n\n    if (stats.isDirectory()) {\n      list = list.concat(readdirSync(path.join(dir, file)));\n    } else {\n      list.push(path.join(dir, file));\n    }\n  });\n  return list;\n}\n\nfunction _package(gyp, argv, callback) {\n  var package_json = gyp.package_json;\n  var napi_build_version = napi.get_napi_build_version_from_command_args(argv);\n  var opts = versioning.evaluate(package_json, gyp.opts, napi_build_version);\n  var from = opts.module_path;\n  var binary_module = path.join(from, opts.module_name + '.node');\n  existsAsync(binary_module, function (found) {\n    if (!found) {\n      return callback(new Error('Cannot package because ' + binary_module + ' missing: run `node-pre-gyp rebuild` first'));\n    }\n\n    var tarball = opts.staged_tarball;\n\n    var filter_func = function filter_func(entry) {\n      var basename = path.basename(entry);\n\n      if (basename.length && basename[0] !== '.') {\n        console.log('packing ' + entry);\n        return true;\n      } else {\n        console.log('skipping ' + entry);\n      }\n\n      return false;\n    };\n\n    makeDir(path.dirname(tarball)).then(function () {\n      var files = readdirSync(from);\n      var base = path.basename(from);\n      files = files.map(function (file) {\n        return path.join(base, path.relative(from, file));\n      });\n      tar.create({\n        portable: false,\n        gzip: true,\n        filter: filter_func,\n        file: tarball,\n        cwd: path.dirname(from)\n      }, files, function (err2) {\n        if (err2) console.error('[' + package_json.name + '] ' + err2.message);else log.info('package', 'Binary staged at \"' + tarball + '\"');\n        return callback(err2);\n      });\n    }).catch(function (err) {\n      return callback(err);\n    });\n  });\n}","map":null,"metadata":{},"sourceType":"script"}