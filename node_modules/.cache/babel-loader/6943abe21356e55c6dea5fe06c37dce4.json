{"ast":null,"code":"/*!\nFullCalendar Scheduler v5.10.1\nDocs & License: https://fullcalendar.io/scheduler\n(c) 2021 Adam Shaw\n*/\nimport { memoize, createRef, mapHash, createElement, NowTimer, DateComponent, createPlugin } from '@fullcalendar/common';\nimport premiumCommonPlugin from '@fullcalendar/premium-common';\nimport resourceCommonPlugin, { VResourceJoiner, VResourceSplitter, flattenResources, DEFAULT_RESOURCE_ORDER, ResourceDayHeader, DayResourceTableModel, ResourceDayTableModel } from '@fullcalendar/resource-common';\nimport timeGridPlugin, { buildDayRanges, DayTimeColsSlicer, TimeCols, buildSlatMetas, TimeColsView, buildTimeColsModel } from '@fullcalendar/timegrid';\nimport { __extends, __assign } from 'tslib';\nimport { ResourceDayTable } from '@fullcalendar/resource-daygrid';\n\nvar ResourceDayTimeColsJoiner =\n/** @class */\nfunction (_super) {\n  __extends(ResourceDayTimeColsJoiner, _super);\n\n  function ResourceDayTimeColsJoiner() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  ResourceDayTimeColsJoiner.prototype.transformSeg = function (seg, resourceDayTable, resourceI) {\n    return [__assign(__assign({}, seg), {\n      col: resourceDayTable.computeCol(seg.col, resourceI)\n    })];\n  };\n\n  return ResourceDayTimeColsJoiner;\n}(VResourceJoiner);\n\nvar ResourceDayTimeCols =\n/** @class */\nfunction (_super) {\n  __extends(ResourceDayTimeCols, _super);\n\n  function ResourceDayTimeCols() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.buildDayRanges = memoize(buildDayRanges);\n    _this.splitter = new VResourceSplitter();\n    _this.slicers = {};\n    _this.joiner = new ResourceDayTimeColsJoiner();\n    _this.timeColsRef = createRef();\n\n    _this.isHitComboAllowed = function (hit0, hit1) {\n      var allowAcrossResources = _this.dayRanges.length === 1;\n      return allowAcrossResources || hit0.dateSpan.resourceId === hit1.dateSpan.resourceId;\n    };\n\n    return _this;\n  }\n\n  ResourceDayTimeCols.prototype.render = function () {\n    var _this = this;\n\n    var _a = this,\n        props = _a.props,\n        context = _a.context;\n\n    var dateEnv = context.dateEnv,\n        options = context.options;\n    var dateProfile = props.dateProfile,\n        resourceDayTableModel = props.resourceDayTableModel;\n    var dayRanges = this.dayRanges = this.buildDayRanges(resourceDayTableModel.dayTableModel, dateProfile, dateEnv);\n    var splitProps = this.splitter.splitProps(props);\n    this.slicers = mapHash(splitProps, function (split, resourceId) {\n      return _this.slicers[resourceId] || new DayTimeColsSlicer();\n    });\n    var slicedProps = mapHash(this.slicers, function (slicer, resourceId) {\n      return slicer.sliceProps(splitProps[resourceId], dateProfile, null, context, dayRanges);\n    });\n    return (// TODO: would move this further down hierarchy, but sliceNowDate needs it\n      createElement(NowTimer, {\n        unit: options.nowIndicator ? 'minute' : 'day'\n      }, function (nowDate, todayRange) {\n        return createElement(TimeCols, __assign({\n          ref: _this.timeColsRef\n        }, _this.joiner.joinProps(slicedProps, resourceDayTableModel), {\n          dateProfile: dateProfile,\n          axis: props.axis,\n          slotDuration: props.slotDuration,\n          slatMetas: props.slatMetas,\n          cells: resourceDayTableModel.cells[0],\n          tableColGroupNode: props.tableColGroupNode,\n          tableMinWidth: props.tableMinWidth,\n          clientWidth: props.clientWidth,\n          clientHeight: props.clientHeight,\n          expandRows: props.expandRows,\n          nowDate: nowDate,\n          nowIndicatorSegs: options.nowIndicator && _this.buildNowIndicatorSegs(nowDate),\n          todayRange: todayRange,\n          onScrollTopRequest: props.onScrollTopRequest,\n          forPrint: props.forPrint,\n          onSlatCoords: props.onSlatCoords,\n          isHitComboAllowed: _this.isHitComboAllowed\n        }));\n      })\n    );\n  };\n\n  ResourceDayTimeCols.prototype.buildNowIndicatorSegs = function (date) {\n    var nonResourceSegs = this.slicers[''].sliceNowDate(date, this.context, this.dayRanges);\n    return this.joiner.expandSegs(this.props.resourceDayTableModel, nonResourceSegs);\n  };\n\n  return ResourceDayTimeCols;\n}(DateComponent);\n\nvar ResourceDayTimeColsView =\n/** @class */\nfunction (_super) {\n  __extends(ResourceDayTimeColsView, _super);\n\n  function ResourceDayTimeColsView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.flattenResources = memoize(flattenResources);\n    _this.buildResourceTimeColsModel = memoize(buildResourceTimeColsModel);\n    _this.buildSlatMetas = memoize(buildSlatMetas);\n    return _this;\n  }\n\n  ResourceDayTimeColsView.prototype.render = function () {\n    var _this = this;\n\n    var _a = this,\n        props = _a.props,\n        context = _a.context;\n\n    var options = context.options,\n        dateEnv = context.dateEnv;\n    var dateProfile = props.dateProfile;\n    var splitProps = this.allDaySplitter.splitProps(props);\n    var resourceOrderSpecs = options.resourceOrder || DEFAULT_RESOURCE_ORDER;\n    var resources = this.flattenResources(props.resourceStore, resourceOrderSpecs);\n    var resourceDayTableModel = this.buildResourceTimeColsModel(dateProfile, context.dateProfileGenerator, resources, options.datesAboveResources, context);\n    var slatMetas = this.buildSlatMetas(dateProfile.slotMinTime, dateProfile.slotMaxTime, options.slotLabelInterval, options.slotDuration, dateEnv);\n    var dayMinWidth = options.dayMinWidth;\n    var hasAttachedAxis = !dayMinWidth;\n    var hasDetachedAxis = dayMinWidth;\n    var headerContent = options.dayHeaders && createElement(ResourceDayHeader, {\n      resources: resources,\n      dates: resourceDayTableModel.dayTableModel.headerDates,\n      dateProfile: dateProfile,\n      datesRepDistinctDays: true,\n      renderIntro: hasAttachedAxis ? this.renderHeadAxis : null\n    });\n\n    var allDayContent = options.allDaySlot !== false && function (contentArg) {\n      return createElement(ResourceDayTable, __assign({}, splitProps.allDay, {\n        dateProfile: dateProfile,\n        resourceDayTableModel: resourceDayTableModel,\n        nextDayThreshold: options.nextDayThreshold,\n        tableMinWidth: contentArg.tableMinWidth,\n        colGroupNode: contentArg.tableColGroupNode,\n        renderRowIntro: hasAttachedAxis ? _this.renderTableRowAxis : null,\n        showWeekNumbers: false,\n        expandRows: false,\n        headerAlignElRef: _this.headerElRef,\n        clientWidth: contentArg.clientWidth,\n        clientHeight: contentArg.clientHeight,\n        forPrint: props.forPrint\n      }, _this.getAllDayMaxEventProps()));\n    };\n\n    var timeGridContent = function timeGridContent(contentArg) {\n      return createElement(ResourceDayTimeCols, __assign({}, splitProps.timed, {\n        dateProfile: dateProfile,\n        axis: hasAttachedAxis,\n        slotDuration: options.slotDuration,\n        slatMetas: slatMetas,\n        resourceDayTableModel: resourceDayTableModel,\n        tableColGroupNode: contentArg.tableColGroupNode,\n        tableMinWidth: contentArg.tableMinWidth,\n        clientWidth: contentArg.clientWidth,\n        clientHeight: contentArg.clientHeight,\n        onSlatCoords: _this.handleSlatCoords,\n        expandRows: contentArg.expandRows,\n        forPrint: props.forPrint,\n        onScrollTopRequest: _this.handleScrollTopRequest\n      }));\n    };\n\n    return hasDetachedAxis ? this.renderHScrollLayout(headerContent, allDayContent, timeGridContent, resourceDayTableModel.colCnt, dayMinWidth, slatMetas, this.state.slatCoords) : this.renderSimpleLayout(headerContent, allDayContent, timeGridContent);\n  };\n\n  return ResourceDayTimeColsView;\n}(TimeColsView);\n\nfunction buildResourceTimeColsModel(dateProfile, dateProfileGenerator, resources, datesAboveResources, context) {\n  var dayTable = buildTimeColsModel(dateProfile, dateProfileGenerator);\n  return datesAboveResources ? new DayResourceTableModel(dayTable, resources, context) : new ResourceDayTableModel(dayTable, resources, context);\n}\n\nvar main = createPlugin({\n  deps: [premiumCommonPlugin, resourceCommonPlugin, timeGridPlugin],\n  initialView: 'resourceTimeGridDay',\n  views: {\n    resourceTimeGrid: {\n      type: 'timeGrid',\n      component: ResourceDayTimeColsView,\n      needsResourceData: true\n    },\n    resourceTimeGridDay: {\n      type: 'resourceTimeGrid',\n      duration: {\n        days: 1\n      }\n    },\n    resourceTimeGridWeek: {\n      type: 'resourceTimeGrid',\n      duration: {\n        weeks: 1\n      }\n    }\n  }\n});\nexport default main;\nexport { ResourceDayTimeCols, ResourceDayTimeColsView };","map":null,"metadata":{},"sourceType":"module"}