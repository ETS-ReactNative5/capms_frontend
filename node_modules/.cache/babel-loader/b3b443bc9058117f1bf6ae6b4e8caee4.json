{"ast":null,"code":"var _regeneratorRuntime = require(\"C:\\\\Users\\\\hlshi\\\\Desktop\\\\capms\\\\pmsproject\\\\capms_frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\hlshi\\\\Desktop\\\\capms\\\\pmsproject\\\\capms_frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\hlshi\\\\Desktop\\\\capms\\\\pmsproject\\\\capms_frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\hlshi\\\\Desktop\\\\capms\\\\pmsproject\\\\capms_frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _require = require('./utils'),\n    columnToLetter = _require.columnToLetter;\n\nvar GoogleSpreadsheetRow = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function GoogleSpreadsheetRow(parentSheet, rowNumber, data) {\n    var _this = this;\n\n    _classCallCheck(this, GoogleSpreadsheetRow);\n\n    this._sheet = parentSheet; // the parent GoogleSpreadsheetWorksheet instance\n\n    this._rowNumber = rowNumber; // the A1 row (1-indexed)\n\n    this._rawData = data;\n\n    var _loop = function _loop(i) {\n      var propName = _this._sheet.headerValues[i];\n      if (!propName) return \"continue\"; // skip empty header\n\n      Object.defineProperty(_this, propName, {\n        get: function get() {\n          return _this._rawData[i];\n        },\n        set: function set(newVal) {\n          _this._rawData[i] = newVal;\n        },\n        enumerable: true\n      });\n    };\n\n    for (var i = 0; i < this._sheet.headerValues.length; i++) {\n      var _ret = _loop(i);\n\n      if (_ret === \"continue\") continue;\n    }\n\n    return this;\n  }\n\n  _createClass(GoogleSpreadsheetRow, [{\n    key: \"rowNumber\",\n    get: function get() {\n      return this._rowNumber;\n    } // TODO: deprecate rowIndex - the name implies it should be zero indexed :(\n\n  }, {\n    key: \"rowIndex\",\n    get: function get() {\n      return this._rowNumber;\n    }\n  }, {\n    key: \"a1Range\",\n    get: function get() {\n      return [this._sheet.a1SheetName, '!', \"A\".concat(this._rowNumber), ':', \"\".concat(columnToLetter(this._sheet.headerValues.length)).concat(this._rowNumber)].join('');\n    }\n  }, {\n    key: \"save\",\n    value: function () {\n      var _save = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var options,\n            response,\n            _args = arguments;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n\n                if (!this._deleted) {\n                  _context.next = 3;\n                  break;\n                }\n\n                throw new Error('This row has been deleted - call getRows again before making updates.');\n\n              case 3:\n                _context.next = 5;\n                return this._sheet._spreadsheet.axios.request({\n                  method: 'put',\n                  url: \"/values/\".concat(encodeURIComponent(this.a1Range)),\n                  params: {\n                    valueInputOption: options.raw ? 'RAW' : 'USER_ENTERED',\n                    includeValuesInResponse: true\n                  },\n                  data: {\n                    range: this.a1Range,\n                    majorDimension: 'ROWS',\n                    values: [this._rawData]\n                  }\n                });\n\n              case 5:\n                response = _context.sent;\n                this._rawData = response.data.updatedData.values[0];\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function save() {\n        return _save.apply(this, arguments);\n      }\n\n      return save;\n    }() // delete this row\n\n  }, {\n    key: \"delete\",\n    value: function () {\n      var _delete2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!this._deleted) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                throw new Error('This row has been deleted - call getRows again before making updates.');\n\n              case 2:\n                _context2.next = 4;\n                return this._sheet._makeSingleUpdateRequest('deleteRange', {\n                  range: {\n                    sheetId: this._sheet.sheetId,\n                    startRowIndex: this._rowNumber - 1,\n                    // this format is zero indexed, because of course...\n                    endRowIndex: this._rowNumber\n                  },\n                  shiftDimension: 'ROWS'\n                });\n\n              case 4:\n                result = _context2.sent;\n                this._deleted = true;\n                return _context2.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function _delete() {\n        return _delete2.apply(this, arguments);\n      }\n\n      return _delete;\n    }()\n  }, {\n    key: \"del\",\n    value: function () {\n      var _del = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt(\"return\", this.delete());\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function del() {\n        return _del.apply(this, arguments);\n      }\n\n      return del;\n    }() // alias to mimic old version of this module\n\n  }]);\n\n  return GoogleSpreadsheetRow;\n}();\n\nmodule.exports = GoogleSpreadsheetRow;","map":null,"metadata":{},"sourceType":"script"}