{"ast":null,"code":"/*!\nFullCalendar Scheduler v5.10.1\nDocs & License: https://fullcalendar.io/scheduler\n(c) 2021 Adam Shaw\n*/\nimport { createElement, Fragment, config, isValidDate, addDays, createPlugin } from '@fullcalendar/common';\nvar RELEASE_DATE = '2021-11-03'; // for Scheduler\n\nvar UPGRADE_WINDOW = 365 + 7; // days. 1 week leeway, for tz shift reasons too\n\nvar INVALID_LICENSE_URL = 'http://fullcalendar.io/docs/schedulerLicenseKey#invalid';\nvar OUTDATED_LICENSE_URL = 'http://fullcalendar.io/docs/schedulerLicenseKey#outdated';\nvar PRESET_LICENSE_KEYS = ['GPL-My-Project-Is-Open-Source', 'CC-Attribution-NonCommercial-NoDerivatives'];\nvar CSS = {\n  position: 'absolute',\n  zIndex: 99999,\n  bottom: '1px',\n  left: '1px',\n  background: '#eee',\n  borderColor: '#ddd',\n  borderStyle: 'solid',\n  borderWidth: '1px 1px 0 0',\n  padding: '2px 4px',\n  fontSize: '12px',\n  borderTopRightRadius: '3px'\n};\n\nfunction buildLicenseWarning(context) {\n  var key = context.options.schedulerLicenseKey;\n  var currentUrl = typeof window !== 'undefined' ? window.location.href : '';\n\n  if (!isImmuneUrl(currentUrl)) {\n    var status_1 = processLicenseKey(key);\n\n    if (status_1 !== 'valid') {\n      return createElement(\"div\", {\n        className: \"fc-license-message\",\n        style: CSS\n      }, status_1 === 'outdated' ? createElement(Fragment, null, 'Your license key is too old to work with this version. ', createElement(\"a\", {\n        href: OUTDATED_LICENSE_URL\n      }, \"More Info\")) : createElement(Fragment, null, 'Your license key is invalid. ', createElement(\"a\", {\n        href: INVALID_LICENSE_URL\n      }, \"More Info\")));\n    }\n  }\n\n  return null;\n}\n/*\nThis decryption is not meant to be bulletproof. Just a way to remind about an upgrade.\n*/\n\n\nfunction processLicenseKey(key) {\n  if (PRESET_LICENSE_KEYS.indexOf(key) !== -1) {\n    return 'valid';\n  }\n\n  var parts = (key || '').match(/^(\\d+)-fcs-(\\d+)$/);\n\n  if (parts && parts[1].length === 10) {\n    var purchaseDate = new Date(parseInt(parts[2], 10) * 1000);\n    var releaseDate = new Date(config.mockSchedulerReleaseDate || RELEASE_DATE);\n\n    if (isValidDate(releaseDate)) {\n      // token won't be replaced in dev mode\n      var minPurchaseDate = addDays(releaseDate, -UPGRADE_WINDOW);\n\n      if (minPurchaseDate < purchaseDate) {\n        return 'valid';\n      }\n\n      return 'outdated';\n    }\n  }\n\n  return 'invalid';\n}\n\nfunction isImmuneUrl(url) {\n  return /\\w+:\\/\\/fullcalendar\\.io\\/|\\/examples\\/[\\w-]+\\.html$/.test(url);\n}\n\nvar OPTION_REFINERS = {\n  schedulerLicenseKey: String\n};\nvar main = createPlugin({\n  optionRefiners: OPTION_REFINERS,\n  viewContainerAppends: [buildLicenseWarning]\n});\nexport default main;","map":null,"metadata":{},"sourceType":"module"}