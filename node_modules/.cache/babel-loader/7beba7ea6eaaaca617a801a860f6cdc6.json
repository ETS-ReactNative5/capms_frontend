{"ast":null,"code":"var _defineProperty = require(\"C:\\\\Users\\\\hlshi\\\\Desktop\\\\pmsproject\\\\sure-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/defineProperty\");\n\nvar _objectSpread = require(\"C:\\\\Users\\\\hlshi\\\\Desktop\\\\pmsproject\\\\sure-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread2\");\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\hlshi\\\\Desktop\\\\pmsproject\\\\sure-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\hlshi\\\\Desktop\\\\pmsproject\\\\sure-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\hlshi\\\\Desktop\\\\pmsproject\\\\sure-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\hlshi\\\\Desktop\\\\pmsproject\\\\sure-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _ = require('lodash');\n\nvar _require = require('./utils'),\n    columnToLetter = _require.columnToLetter;\n\nvar _require2 = require('./errors'),\n    GoogleSpreadsheetFormulaError = _require2.GoogleSpreadsheetFormulaError;\n\nvar GoogleSpreadsheetCell = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function GoogleSpreadsheetCell(parentSheet, rowIndex, columnIndex, cellData) {\n    _classCallCheck(this, GoogleSpreadsheetCell);\n\n    this._sheet = parentSheet; // the parent GoogleSpreadsheetWorksheet instance\n\n    this._row = rowIndex;\n    this._column = columnIndex;\n\n    this._updateRawData(cellData);\n\n    return this;\n  } // newData can be undefined/null if the cell is totally empty and unformatted\n\n\n  _createClass(GoogleSpreadsheetCell, [{\n    key: \"_updateRawData\",\n    value: function _updateRawData() {\n      var newData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this._rawData = newData;\n      this._draftData = {}; // stuff to save\n\n      this._error = null;\n\n      if (_.get(this._rawData, 'effectiveValue.errorValue')) {\n        this._error = new GoogleSpreadsheetFormulaError(this._rawData.effectiveValue.errorValue);\n      }\n    } // CELL LOCATION/ADDRESS /////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"rowIndex\",\n    get: function get() {\n      return this._row;\n    }\n  }, {\n    key: \"columnIndex\",\n    get: function get() {\n      return this._column;\n    }\n  }, {\n    key: \"a1Column\",\n    get: function get() {\n      return columnToLetter(this._column + 1);\n    }\n  }, {\n    key: \"a1Row\",\n    get: function get() {\n      return this._row + 1;\n    } // a1 row numbers start at 1 instead of 0\n\n  }, {\n    key: \"a1Address\",\n    get: function get() {\n      return \"\".concat(this.a1Column).concat(this.a1Row);\n    } // CELL CONTENTS - VALUE/FORMULA/NOTES ///////////////////////////////////////////////////////////\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      // const typeKey = _.keys(this._rawData.effectiveValue)[0];\n      if (this._draftData.value !== undefined) throw new Error('Value has been changed');\n      if (this._error) return this._error;\n      if (!this._rawData.effectiveValue) return null;\n      return _.values(this._rawData.effectiveValue)[0];\n    },\n    set: function set(newValue) {\n      if (_.isBoolean(newValue)) {\n        this._draftData.valueType = 'boolValue';\n      } else if (_.isString(newValue)) {\n        if (newValue.substr(0, 1) === '=') this._draftData.valueType = 'formulaValue';else this._draftData.valueType = 'stringValue';\n      } else if (_.isFinite(newValue)) {\n        this._draftData.valueType = 'numberValue';\n      } else if (_.isNil(newValue)) {\n        // null or undefined\n        this._draftData.valueType = 'stringValue';\n        newValue = '';\n      } else {\n        throw new Error('Set value to boolean, string, or number');\n      }\n\n      this._draftData.value = newValue;\n    }\n  }, {\n    key: \"valueType\",\n    get: function get() {\n      // an error only happens with a formula\n      if (this._error) return 'errorValue';\n      if (!this._rawData.effectiveValue) return null;\n      return _.keys(this._rawData.effectiveValue)[0];\n    }\n  }, {\n    key: \"formattedValue\",\n    get: function get() {\n      return this._rawData.formattedValue || null;\n    },\n    set: function set(newVal) {\n      throw new Error('You cannot modify the formatted value directly');\n    }\n  }, {\n    key: \"formula\",\n    get: function get() {\n      return _.get(this._rawData, 'userEnteredValue.formulaValue', null);\n    },\n    set: function set(newValue) {\n      if (newValue.substr(0, 1) !== '=') throw new Error('formula must begin with \"=\"');\n      this.value = newValue; // use existing value setter\n    }\n  }, {\n    key: \"formulaError\",\n    get: function get() {\n      return this._error;\n    }\n  }, {\n    key: \"hyperlink\",\n    get: function get() {\n      if (this._draftData.value) throw new Error('Save cell to be able to read hyperlink');\n      return this._rawData.hyperlink;\n    },\n    set: function set(val) {\n      throw new Error('Do not set hyperlink directly. Instead set cell.formula, for example `cell.formula = \\'=HYPERLINK(\"http://google.com\", \"Google\")\\'`');\n    }\n  }, {\n    key: \"note\",\n    get: function get() {\n      return this._draftData.note !== undefined ? this._draftData.note : this._rawData.note;\n    },\n    set: function set(newVal) {\n      if (newVal === null || newVal === undefined) newVal = '';\n      if (!_.isString(newVal)) throw new Error('Note must be a string');\n      if (newVal === this._rawData.note) delete this._draftData.note;else this._draftData.note = newVal;\n    } // CELL FORMATTING ///////////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"userEnteredFormat\",\n    get: function get() {\n      return this._rawData.userEnteredFormat;\n    },\n    set: function set(newVal) {\n      throw new Error('Do not modify directly, instead use format properties');\n    }\n  }, {\n    key: \"effectiveFormat\",\n    get: function get() {\n      return this._rawData.effectiveFormat;\n    },\n    set: function set(newVal) {\n      throw new Error('Read-only');\n    }\n  }, {\n    key: \"_getFormatParam\",\n    value: function _getFormatParam(param) {\n      // we freeze the object so users don't change nested props accidentally\n      // TODO: figure out something that would throw an error if you try to update it?\n      if (_.get(this._draftData, \"userEnteredFormat.\".concat(param))) {\n        throw new Error('User format is unsaved - save the cell to be able to read it again');\n      }\n\n      return Object.freeze(this._rawData.userEnteredFormat[param]);\n    }\n  }, {\n    key: \"_setFormatParam\",\n    value: function _setFormatParam(param, newVal) {\n      if (_.isEqual(newVal, _.get(this._rawData, \"userEnteredFormat.\".concat(param)))) {\n        _.unset(this._draftData, \"userEnteredFormat.\".concat(param));\n      } else {\n        _.set(this._draftData, \"userEnteredFormat.\".concat(param), newVal);\n\n        this._draftData.clearFormat = false;\n      }\n    } // format getters\n\n  }, {\n    key: \"numberFormat\",\n    get: function get() {\n      return this._getFormatParam('numberFormat');\n    },\n    set: // format setters\n    function set(newVal) {\n      return this._setFormatParam('numberFormat', newVal);\n    }\n  }, {\n    key: \"backgroundColor\",\n    get: function get() {\n      return this._getFormatParam('backgroundColor');\n    },\n    set: function set(newVal) {\n      return this._setFormatParam('backgroundColor', newVal);\n    }\n  }, {\n    key: \"borders\",\n    get: function get() {\n      return this._getFormatParam('borders');\n    },\n    set: function set(newVal) {\n      return this._setFormatParam('borders', newVal);\n    }\n  }, {\n    key: \"padding\",\n    get: function get() {\n      return this._getFormatParam('padding');\n    },\n    set: function set(newVal) {\n      return this._setFormatParam('padding', newVal);\n    }\n  }, {\n    key: \"horizontalAlignment\",\n    get: function get() {\n      return this._getFormatParam('horizontalAlignment');\n    },\n    set: function set(newVal) {\n      return this._setFormatParam('horizontalAlignment', newVal);\n    }\n  }, {\n    key: \"verticalAlignment\",\n    get: function get() {\n      return this._getFormatParam('verticalAlignment');\n    },\n    set: function set(newVal) {\n      return this._setFormatParam('verticalAlignment', newVal);\n    }\n  }, {\n    key: \"wrapStrategy\",\n    get: function get() {\n      return this._getFormatParam('wrapStrategy');\n    },\n    set: function set(newVal) {\n      return this._setFormatParam('wrapStrategy', newVal);\n    }\n  }, {\n    key: \"textDirection\",\n    get: function get() {\n      return this._getFormatParam('textDirection');\n    },\n    set: function set(newVal) {\n      return this._setFormatParam('textDirection', newVal);\n    }\n  }, {\n    key: \"textFormat\",\n    get: function get() {\n      return this._getFormatParam('textFormat');\n    },\n    set: function set(newVal) {\n      return this._setFormatParam('textFormat', newVal);\n    }\n  }, {\n    key: \"hyperlinkDisplayType\",\n    get: function get() {\n      return this._getFormatParam('hyperlinkDisplayType');\n    },\n    set: function set(newVal) {\n      return this._setFormatParam('hyperlinkDisplayType', newVal);\n    }\n  }, {\n    key: \"textRotation\",\n    get: function get() {\n      return this._getFormatParam('textRotation');\n    },\n    set: function set(newVal) {\n      return this._setFormatParam('textRotation', newVal);\n    }\n  }, {\n    key: \"clearAllFormatting\",\n    value: function clearAllFormatting() {\n      // need to track this separately since by setting/unsetting things, we may end up with\n      // this._draftData.userEnteredFormat as an empty object, but not an intent to clear it\n      this._draftData.clearFormat = true;\n      delete this._draftData.userEnteredFormat;\n    } // SAVING + UTILS ////////////////////////////////////////////////////////////////////////////////\n    // returns true if there are any updates that have not been saved yet\n\n  }, {\n    key: \"_isDirty\",\n    get: function get() {\n      // have to be careful about checking undefined rather than falsy\n      // in case a new value is empty string or 0 or false\n      if (this._draftData.note !== undefined) return true;\n      if (_.keys(this._draftData.userEnteredFormat).length) return true;\n      if (this._draftData.clearFormat) return true;\n      if (this._draftData.value !== undefined) return true;\n      return false;\n    }\n  }, {\n    key: \"discardUnsavedChanges\",\n    value: function discardUnsavedChanges() {\n      this._draftData = {};\n    }\n  }, {\n    key: \"save\",\n    value: function () {\n      var _save = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this._sheet.saveUpdatedCells([this]);\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function save() {\n        return _save.apply(this, arguments);\n      }\n\n      return save;\n    }() // used by worksheet when saving cells\n    // returns an individual batchUpdate request to update the cell\n\n  }, {\n    key: \"_getUpdateRequest\",\n    value: function _getUpdateRequest() {\n      // this logic should match the _isDirty logic above\n      // but we need it broken up to build the request below\n      var isValueUpdated = this._draftData.value !== undefined;\n      var isNoteUpdated = this._draftData.note !== undefined;\n      var isFormatUpdated = !!_.keys(this._draftData.userEnteredFormat || {}).length;\n      var isFormatCleared = this._draftData.clearFormat; // if no updates, we return null, which we can filter out later before sending requests\n\n      if (!_.some([isValueUpdated, isNoteUpdated, isFormatUpdated, isFormatCleared])) {\n        return null;\n      } // build up the formatting object, which has some quirks...\n\n\n      var format = _objectSpread(_objectSpread({}, this._rawData.userEnteredFormat), this._draftData.userEnteredFormat); // if background color already set, cell has backgroundColor and backgroundColorStyle\n      // but backgroundColorStyle takes precendence so we must remove to set the color\n      // see https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/cells#CellFormat\n\n\n      if (_.get(this._draftData, 'userEnteredFormat.backgroundColor')) {\n        delete format.backgroundColorStyle;\n      }\n\n      return {\n        updateCells: {\n          rows: [{\n            values: [_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, isValueUpdated && {\n              userEnteredValue: _defineProperty({}, this._draftData.valueType, this._draftData.value)\n            }), isNoteUpdated && {\n              note: this._draftData.note\n            }), isFormatUpdated && {\n              userEnteredFormat: format\n            }), isFormatCleared && {\n              userEnteredFormat: {}\n            })]\n          }],\n          // turns into a string of which fields to update ex \"note,userEnteredFormat\"\n          fields: _.keys(_.pickBy({\n            userEnteredValue: isValueUpdated,\n            note: isNoteUpdated,\n            userEnteredFormat: isFormatUpdated || isFormatCleared\n          })).join(','),\n          start: {\n            sheetId: this._sheet.sheetId,\n            rowIndex: this.rowIndex,\n            columnIndex: this.columnIndex\n          }\n        }\n      };\n    }\n  }]);\n\n  return GoogleSpreadsheetCell;\n}();\n\nmodule.exports = GoogleSpreadsheetCell;","map":null,"metadata":{},"sourceType":"script"}