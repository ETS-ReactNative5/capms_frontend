{"ast":null,"code":"/*!\nFullCalendar Scheduler v5.10.1\nDocs & License: https://fullcalendar.io/scheduler\n(c) 2021 Adam Shaw\n*/\nimport { memoize, filterHash, rangesIntersect, isPropsEqual, mapHash, combineEventUis, refineProps, guid, identity, rangesEqual, parseBusinessHours, createEventUi, parseClassNames, EventApi, CalendarApi, Splitter, mergeEventStores, isPropsValid, parseFieldSpecs, unpromisify, requestJson, createElement, ViewContextType, formatDayString, RenderHook, BaseComponent, NowTimer, Fragment, TableDateCell, TableDowCell, computeFallbackHeaderFormat, flexibleCompare, compareByFieldSpecs, createPlugin } from '@fullcalendar/common';\nimport premiumCommonPlugin from '@fullcalendar/premium-common';\nimport { __assign, __extends, __spreadArray } from 'tslib';\n\nfunction massageEventDragMutation(eventMutation, hit0, hit1) {\n  var resource0 = hit0.dateSpan.resourceId;\n  var resource1 = hit1.dateSpan.resourceId;\n\n  if (resource0 && resource1 && resource0 !== resource1) {\n    eventMutation.resourceMutation = {\n      matchResourceId: resource0,\n      setResourceId: resource1\n    };\n  }\n}\n/*\nTODO: all this would be much easier if we were using a hash!\n*/\n\n\nfunction applyEventDefMutation(eventDef, mutation, context) {\n  var resourceMutation = mutation.resourceMutation;\n\n  if (resourceMutation && computeResourceEditable(eventDef, context)) {\n    var index = eventDef.resourceIds.indexOf(resourceMutation.matchResourceId);\n\n    if (index !== -1) {\n      var resourceIds = eventDef.resourceIds.slice(); // copy\n\n      resourceIds.splice(index, 1); // remove\n\n      if (resourceIds.indexOf(resourceMutation.setResourceId) === -1) {\n        // not already in there\n        resourceIds.push(resourceMutation.setResourceId); // add\n      }\n\n      eventDef.resourceIds = resourceIds;\n    }\n  }\n}\n/*\nHACK\nTODO: use EventUi system instead of this\n*/\n\n\nfunction computeResourceEditable(eventDef, context) {\n  var resourceEditable = eventDef.resourceEditable;\n\n  if (resourceEditable == null) {\n    var source = eventDef.sourceId && context.getCurrentData().eventSources[eventDef.sourceId];\n\n    if (source) {\n      resourceEditable = source.extendedProps.resourceEditable; // used the Source::extendedProps hack\n    }\n\n    if (resourceEditable == null) {\n      resourceEditable = context.options.eventResourceEditable;\n\n      if (resourceEditable == null) {\n        resourceEditable = context.options.editable; // TODO: use defaults system instead\n      }\n    }\n  }\n\n  return resourceEditable;\n}\n\nfunction transformEventDrop(mutation, context) {\n  var resourceMutation = mutation.resourceMutation;\n\n  if (resourceMutation) {\n    var calendarApi = context.calendarApi;\n    return {\n      oldResource: calendarApi.getResourceById(resourceMutation.matchResourceId),\n      newResource: calendarApi.getResourceById(resourceMutation.setResourceId)\n    };\n  }\n\n  return {\n    oldResource: null,\n    newResource: null\n  };\n}\n\nvar ResourceDataAdder =\n/** @class */\nfunction () {\n  function ResourceDataAdder() {\n    this.filterResources = memoize(filterResources);\n  }\n\n  ResourceDataAdder.prototype.transform = function (viewProps, calendarProps) {\n    if (calendarProps.viewSpec.optionDefaults.needsResourceData) {\n      return {\n        resourceStore: this.filterResources(calendarProps.resourceStore, calendarProps.options.filterResourcesWithEvents, calendarProps.eventStore, calendarProps.dateProfile.activeRange),\n        resourceEntityExpansions: calendarProps.resourceEntityExpansions\n      };\n    }\n\n    return null;\n  };\n\n  return ResourceDataAdder;\n}();\n\nfunction filterResources(resourceStore, doFilterResourcesWithEvents, eventStore, activeRange) {\n  if (doFilterResourcesWithEvents) {\n    var instancesInRange = filterEventInstancesInRange(eventStore.instances, activeRange);\n    var hasEvents_1 = computeHasEvents(instancesInRange, eventStore.defs);\n\n    __assign(hasEvents_1, computeAncestorHasEvents(hasEvents_1, resourceStore));\n\n    return filterHash(resourceStore, function (resource, resourceId) {\n      return hasEvents_1[resourceId];\n    });\n  }\n\n  return resourceStore;\n}\n\nfunction filterEventInstancesInRange(eventInstances, activeRange) {\n  return filterHash(eventInstances, function (eventInstance) {\n    return rangesIntersect(eventInstance.range, activeRange);\n  });\n}\n\nfunction computeHasEvents(eventInstances, eventDefs) {\n  var hasEvents = {};\n\n  for (var instanceId in eventInstances) {\n    var instance = eventInstances[instanceId];\n\n    for (var _i = 0, _a = eventDefs[instance.defId].resourceIds; _i < _a.length; _i++) {\n      var resourceId = _a[_i];\n      hasEvents[resourceId] = true;\n    }\n  }\n\n  return hasEvents;\n}\n/*\nmark resources as having events if any of their ancestors have them\nNOTE: resourceStore might not have all the resources that hasEvents{} has keyed\n*/\n\n\nfunction computeAncestorHasEvents(hasEvents, resourceStore) {\n  var res = {};\n\n  for (var resourceId in hasEvents) {\n    var resource = void 0;\n\n    while (resource = resourceStore[resourceId]) {\n      resourceId = resource.parentId; // now functioning as the parentId\n\n      if (resourceId) {\n        res[resourceId] = true;\n      } else {\n        break;\n      }\n    }\n  }\n\n  return res;\n}\n/*\nfor making sure events that have editable resources are always draggable in resource views\n*/\n\n\nfunction transformIsDraggable(val, eventDef, eventUi, context) {\n  if (!val) {\n    var state = context.getCurrentData();\n    var viewSpec = state.viewSpecs[state.currentViewType];\n\n    if (viewSpec.optionDefaults.needsResourceData) {\n      if (computeResourceEditable(eventDef, context)) {\n        return true;\n      }\n    }\n  }\n\n  return val;\n} // for when non-resource view should be given EventUi info (for event coloring/constraints based off of resource data)\n\n\nvar ResourceEventConfigAdder =\n/** @class */\nfunction () {\n  function ResourceEventConfigAdder() {\n    this.buildResourceEventUis = memoize(buildResourceEventUis, isPropsEqual);\n    this.injectResourceEventUis = memoize(injectResourceEventUis);\n  }\n\n  ResourceEventConfigAdder.prototype.transform = function (viewProps, calendarProps) {\n    if (!calendarProps.viewSpec.optionDefaults.needsResourceData) {\n      return {\n        eventUiBases: this.injectResourceEventUis(viewProps.eventUiBases, viewProps.eventStore.defs, this.buildResourceEventUis(calendarProps.resourceStore))\n      };\n    }\n\n    return null;\n  };\n\n  return ResourceEventConfigAdder;\n}();\n\nfunction buildResourceEventUis(resourceStore) {\n  return mapHash(resourceStore, function (resource) {\n    return resource.ui;\n  });\n}\n\nfunction injectResourceEventUis(eventUiBases, eventDefs, resourceEventUis) {\n  return mapHash(eventUiBases, function (eventUi, defId) {\n    if (defId) {\n      // not the '' key\n      return injectResourceEventUi(eventUi, eventDefs[defId], resourceEventUis);\n    }\n\n    return eventUi;\n  });\n}\n\nfunction injectResourceEventUi(origEventUi, eventDef, resourceEventUis) {\n  var parts = []; // first resource takes precedence, which fights with the ordering of combineEventUis, thus the unshifts\n\n  for (var _i = 0, _a = eventDef.resourceIds; _i < _a.length; _i++) {\n    var resourceId = _a[_i];\n\n    if (resourceEventUis[resourceId]) {\n      parts.unshift(resourceEventUis[resourceId]);\n    }\n  }\n\n  parts.unshift(origEventUi);\n  return combineEventUis(parts);\n}\n\nvar defs = []; // TODO: use plugin system\n\nfunction registerResourceSourceDef(def) {\n  defs.push(def);\n}\n\nfunction getResourceSourceDef(id) {\n  return defs[id];\n}\n\nfunction getResourceSourceDefs() {\n  return defs;\n} // TODO: make this a plugin-able parser\n// TODO: success/failure\n\n\nvar RESOURCE_SOURCE_REFINERS = {\n  id: String,\n  // for array. TODO: move to resource-array\n  resources: identity,\n  // for json feed. TODO: move to resource-json-feed\n  url: String,\n  method: String,\n  startParam: String,\n  endParam: String,\n  timeZoneParam: String,\n  extraParams: identity\n};\n\nfunction parseResourceSource(input) {\n  var inputObj;\n\n  if (typeof input === 'string') {\n    inputObj = {\n      url: input\n    };\n  } else if (typeof input === 'function' || Array.isArray(input)) {\n    inputObj = {\n      resources: input\n    };\n  } else if (typeof input === 'object' && input) {\n    // non-null object\n    inputObj = input;\n  }\n\n  if (inputObj) {\n    var _a = refineProps(inputObj, RESOURCE_SOURCE_REFINERS),\n        refined = _a.refined,\n        extra = _a.extra;\n\n    warnUnknownProps(extra);\n    var metaRes = buildResourceSourceMeta(refined);\n\n    if (metaRes) {\n      return {\n        _raw: input,\n        sourceId: guid(),\n        sourceDefId: metaRes.sourceDefId,\n        meta: metaRes.meta,\n        publicId: refined.id || '',\n        isFetching: false,\n        latestFetchId: '',\n        fetchRange: null\n      };\n    }\n  }\n\n  return null;\n}\n\nfunction buildResourceSourceMeta(refined) {\n  var defs = getResourceSourceDefs();\n\n  for (var i = defs.length - 1; i >= 0; i -= 1) {\n    // later-added plugins take precedence\n    var def = defs[i];\n    var meta = def.parseMeta(refined);\n\n    if (meta) {\n      return {\n        meta: meta,\n        sourceDefId: i\n      };\n    }\n  }\n\n  return null;\n}\n\nfunction warnUnknownProps(props) {\n  for (var propName in props) {\n    console.warn(\"Unknown resource prop '\" + propName + \"'\");\n  }\n}\n\nfunction reduceResourceSource(source, action, context) {\n  var options = context.options,\n      dateProfile = context.dateProfile;\n\n  if (!source || !action) {\n    return createSource(options.initialResources || options.resources, dateProfile.activeRange, options.refetchResourcesOnNavigate, context);\n  }\n\n  switch (action.type) {\n    case 'RESET_RESOURCE_SOURCE':\n      return createSource(action.resourceSourceInput, dateProfile.activeRange, options.refetchResourcesOnNavigate, context);\n\n    case 'PREV': // TODO: how do we track all actions that affect dateProfile :(\n\n    case 'NEXT':\n    case 'CHANGE_DATE':\n    case 'CHANGE_VIEW_TYPE':\n      return handleRangeChange(source, dateProfile.activeRange, options.refetchResourcesOnNavigate, context);\n\n    case 'RECEIVE_RESOURCES':\n    case 'RECEIVE_RESOURCE_ERROR':\n      return receiveResponse(source, action.fetchId, action.fetchRange);\n\n    case 'REFETCH_RESOURCES':\n      return fetchSource(source, dateProfile.activeRange, context);\n\n    default:\n      return source;\n  }\n}\n\nfunction createSource(input, activeRange, refetchResourcesOnNavigate, context) {\n  if (input) {\n    var source = parseResourceSource(input);\n    source = fetchSource(source, refetchResourcesOnNavigate ? activeRange : null, context);\n    return source;\n  }\n\n  return null;\n}\n\nfunction handleRangeChange(source, activeRange, refetchResourcesOnNavigate, context) {\n  if (refetchResourcesOnNavigate && !doesSourceIgnoreRange(source) && (!source.fetchRange || !rangesEqual(source.fetchRange, activeRange))) {\n    return fetchSource(source, activeRange, context);\n  }\n\n  return source;\n}\n\nfunction doesSourceIgnoreRange(source) {\n  return Boolean(getResourceSourceDef(source.sourceDefId).ignoreRange);\n}\n\nfunction fetchSource(source, fetchRange, context) {\n  var sourceDef = getResourceSourceDef(source.sourceDefId);\n  var fetchId = guid();\n  sourceDef.fetch({\n    resourceSource: source,\n    range: fetchRange,\n    context: context\n  }, function (res) {\n    context.dispatch({\n      type: 'RECEIVE_RESOURCES',\n      fetchId: fetchId,\n      fetchRange: fetchRange,\n      rawResources: res.rawResources\n    });\n  }, function (error) {\n    context.dispatch({\n      type: 'RECEIVE_RESOURCE_ERROR',\n      fetchId: fetchId,\n      fetchRange: fetchRange,\n      error: error\n    });\n  });\n  return __assign(__assign({}, source), {\n    isFetching: true,\n    latestFetchId: fetchId\n  });\n}\n\nfunction receiveResponse(source, fetchId, fetchRange) {\n  if (fetchId === source.latestFetchId) {\n    return __assign(__assign({}, source), {\n      isFetching: false,\n      fetchRange: fetchRange\n    });\n  }\n\n  return source;\n}\n\nvar PRIVATE_ID_PREFIX = '_fc:';\nvar RESOURCE_REFINERS = {\n  id: String,\n  parentId: String,\n  children: identity,\n  title: String,\n  businessHours: identity,\n  extendedProps: identity,\n  // event-ui\n  eventEditable: Boolean,\n  eventStartEditable: Boolean,\n  eventDurationEditable: Boolean,\n  eventConstraint: identity,\n  eventOverlap: Boolean,\n  eventAllow: identity,\n  eventClassNames: parseClassNames,\n  eventBackgroundColor: String,\n  eventBorderColor: String,\n  eventTextColor: String,\n  eventColor: String\n};\n/*\nneeds a full store so that it can populate children too\n*/\n\nfunction parseResource(raw, parentId, store, context) {\n  if (parentId === void 0) {\n    parentId = '';\n  }\n\n  var _a = refineProps(raw, RESOURCE_REFINERS),\n      refined = _a.refined,\n      extra = _a.extra;\n\n  var resource = {\n    id: refined.id || PRIVATE_ID_PREFIX + guid(),\n    parentId: refined.parentId || parentId,\n    title: refined.title || '',\n    businessHours: refined.businessHours ? parseBusinessHours(refined.businessHours, context) : null,\n    ui: createEventUi({\n      editable: refined.eventEditable,\n      startEditable: refined.eventStartEditable,\n      durationEditable: refined.eventDurationEditable,\n      constraint: refined.eventConstraint,\n      overlap: refined.eventOverlap,\n      allow: refined.eventAllow,\n      classNames: refined.eventClassNames,\n      backgroundColor: refined.eventBackgroundColor,\n      borderColor: refined.eventBorderColor,\n      textColor: refined.eventTextColor,\n      color: refined.eventColor\n    }, context),\n    extendedProps: __assign(__assign({}, extra), refined.extendedProps)\n  }; // help out ResourceApi from having user modify props\n\n  Object.freeze(resource.ui.classNames);\n  Object.freeze(resource.extendedProps);\n  if (store[resource.id]) ;else {\n    store[resource.id] = resource;\n\n    if (refined.children) {\n      for (var _i = 0, _b = refined.children; _i < _b.length; _i++) {\n        var childInput = _b[_i];\n        parseResource(childInput, resource.id, store, context);\n      }\n    }\n  }\n  return resource;\n}\n/*\nTODO: use this in more places\n*/\n\n\nfunction getPublicId(id) {\n  if (id.indexOf(PRIVATE_ID_PREFIX) === 0) {\n    return '';\n  }\n\n  return id;\n}\n\nfunction reduceResourceStore(store, action, source, context) {\n  if (!store || !action) {\n    return {};\n  }\n\n  switch (action.type) {\n    case 'RECEIVE_RESOURCES':\n      return receiveRawResources(store, action.rawResources, action.fetchId, source, context);\n\n    case 'ADD_RESOURCE':\n      return addResource(store, action.resourceHash);\n\n    case 'REMOVE_RESOURCE':\n      return removeResource(store, action.resourceId);\n\n    case 'SET_RESOURCE_PROP':\n      return setResourceProp(store, action.resourceId, action.propName, action.propValue);\n\n    case 'SET_RESOURCE_EXTENDED_PROP':\n      return setResourceExtendedProp(store, action.resourceId, action.propName, action.propValue);\n\n    default:\n      return store;\n  }\n}\n\nfunction receiveRawResources(existingStore, inputs, fetchId, source, context) {\n  if (source.latestFetchId === fetchId) {\n    var nextStore = {};\n\n    for (var _i = 0, inputs_1 = inputs; _i < inputs_1.length; _i++) {\n      var input = inputs_1[_i];\n      parseResource(input, '', nextStore, context);\n    }\n\n    return nextStore;\n  }\n\n  return existingStore;\n}\n\nfunction addResource(existingStore, additions) {\n  // TODO: warn about duplicate IDs\n  return __assign(__assign({}, existingStore), additions);\n}\n\nfunction removeResource(existingStore, resourceId) {\n  var newStore = __assign({}, existingStore);\n\n  delete newStore[resourceId]; // promote children\n\n  for (var childResourceId in newStore) {\n    // a child, *maybe* but probably not\n    if (newStore[childResourceId].parentId === resourceId) {\n      newStore[childResourceId] = __assign(__assign({}, newStore[childResourceId]), {\n        parentId: ''\n      });\n    }\n  }\n\n  return newStore;\n}\n\nfunction setResourceProp(existingStore, resourceId, name, value) {\n  var _a, _b;\n\n  var existingResource = existingStore[resourceId]; // TODO: sanitization\n\n  if (existingResource) {\n    return __assign(__assign({}, existingStore), (_a = {}, _a[resourceId] = __assign(__assign({}, existingResource), (_b = {}, _b[name] = value, _b)), _a));\n  }\n\n  return existingStore;\n}\n\nfunction setResourceExtendedProp(existingStore, resourceId, name, value) {\n  var _a, _b;\n\n  var existingResource = existingStore[resourceId];\n\n  if (existingResource) {\n    return __assign(__assign({}, existingStore), (_a = {}, _a[resourceId] = __assign(__assign({}, existingResource), {\n      extendedProps: __assign(__assign({}, existingResource.extendedProps), (_b = {}, _b[name] = value, _b))\n    }), _a));\n  }\n\n  return existingStore;\n}\n\nfunction reduceResourceEntityExpansions(expansions, action) {\n  var _a;\n\n  if (!expansions || !action) {\n    return {};\n  }\n\n  switch (action.type) {\n    case 'SET_RESOURCE_ENTITY_EXPANDED':\n      return __assign(__assign({}, expansions), (_a = {}, _a[action.id] = action.isExpanded, _a));\n\n    default:\n      return expansions;\n  }\n}\n\nfunction reduceResources(state, action, context) {\n  var resourceSource = reduceResourceSource(state && state.resourceSource, action, context);\n  var resourceStore = reduceResourceStore(state && state.resourceStore, action, resourceSource, context);\n  var resourceEntityExpansions = reduceResourceEntityExpansions(state && state.resourceEntityExpansions, action);\n  return {\n    resourceSource: resourceSource,\n    resourceStore: resourceStore,\n    resourceEntityExpansions: resourceEntityExpansions\n  };\n}\n\nvar EVENT_REFINERS = {\n  resourceId: String,\n  resourceIds: identity,\n  resourceEditable: Boolean\n};\n\nfunction generateEventDefResourceMembers(refined) {\n  return {\n    resourceIds: ensureStringArray(refined.resourceIds).concat(refined.resourceId ? [refined.resourceId] : []),\n    resourceEditable: refined.resourceEditable\n  };\n}\n\nfunction ensureStringArray(items) {\n  return (items || []).map(function (item) {\n    return String(item);\n  });\n}\n\nfunction transformDateSelectionJoin(hit0, hit1) {\n  var resourceId0 = hit0.dateSpan.resourceId;\n  var resourceId1 = hit1.dateSpan.resourceId;\n\n  if (resourceId0 && resourceId1) {\n    return {\n      resourceId: resourceId0\n    };\n  }\n\n  return null;\n}\n\nvar ResourceApi =\n/** @class */\nfunction () {\n  function ResourceApi(_context, _resource) {\n    this._context = _context;\n    this._resource = _resource;\n  }\n\n  ResourceApi.prototype.setProp = function (name, value) {\n    var oldResource = this._resource;\n\n    this._context.dispatch({\n      type: 'SET_RESOURCE_PROP',\n      resourceId: oldResource.id,\n      propName: name,\n      propValue: value\n    });\n\n    this.sync(oldResource);\n  };\n\n  ResourceApi.prototype.setExtendedProp = function (name, value) {\n    var oldResource = this._resource;\n\n    this._context.dispatch({\n      type: 'SET_RESOURCE_EXTENDED_PROP',\n      resourceId: oldResource.id,\n      propName: name,\n      propValue: value\n    });\n\n    this.sync(oldResource);\n  };\n\n  ResourceApi.prototype.sync = function (oldResource) {\n    var context = this._context;\n    var resourceId = oldResource.id; // TODO: what if dispatch didn't complete synchronously?\n\n    this._resource = context.getCurrentData().resourceStore[resourceId];\n    context.emitter.trigger('resourceChange', {\n      oldResource: new ResourceApi(context, oldResource),\n      resource: this,\n      revert: function revert() {\n        var _a;\n\n        context.dispatch({\n          type: 'ADD_RESOURCE',\n          resourceHash: (_a = {}, _a[resourceId] = oldResource, _a)\n        });\n      }\n    });\n  };\n\n  ResourceApi.prototype.remove = function () {\n    var context = this._context;\n    var internalResource = this._resource;\n    var resourceId = internalResource.id;\n    context.dispatch({\n      type: 'REMOVE_RESOURCE',\n      resourceId: resourceId\n    });\n    context.emitter.trigger('resourceRemove', {\n      resource: this,\n      revert: function revert() {\n        var _a;\n\n        context.dispatch({\n          type: 'ADD_RESOURCE',\n          resourceHash: (_a = {}, _a[resourceId] = internalResource, _a)\n        });\n      }\n    });\n  };\n\n  ResourceApi.prototype.getParent = function () {\n    var context = this._context;\n    var parentId = this._resource.parentId;\n\n    if (parentId) {\n      return new ResourceApi(context, context.getCurrentData().resourceSource[parentId]);\n    }\n\n    return null;\n  };\n\n  ResourceApi.prototype.getChildren = function () {\n    var thisResourceId = this._resource.id;\n    var context = this._context;\n    var resourceStore = context.getCurrentData().resourceStore;\n    var childApis = [];\n\n    for (var resourceId in resourceStore) {\n      if (resourceStore[resourceId].parentId === thisResourceId) {\n        childApis.push(new ResourceApi(context, resourceStore[resourceId]));\n      }\n    }\n\n    return childApis;\n  };\n  /*\n  this is really inefficient!\n  TODO: make EventApi::resourceIds a hash or keep an index in the Calendar's state\n  */\n\n\n  ResourceApi.prototype.getEvents = function () {\n    var thisResourceId = this._resource.id;\n    var context = this._context;\n    var _a = context.getCurrentData().eventStore,\n        defs = _a.defs,\n        instances = _a.instances;\n    var eventApis = [];\n\n    for (var instanceId in instances) {\n      var instance = instances[instanceId];\n      var def = defs[instance.defId];\n\n      if (def.resourceIds.indexOf(thisResourceId) !== -1) {\n        // inefficient!!!\n        eventApis.push(new EventApi(context, def, instance));\n      }\n    }\n\n    return eventApis;\n  };\n\n  Object.defineProperty(ResourceApi.prototype, \"id\", {\n    get: function get() {\n      return getPublicId(this._resource.id);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ResourceApi.prototype, \"title\", {\n    get: function get() {\n      return this._resource.title;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ResourceApi.prototype, \"eventConstraint\", {\n    get: function get() {\n      return this._resource.ui.constraints[0] || null;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ResourceApi.prototype, \"eventOverlap\", {\n    get: function get() {\n      return this._resource.ui.overlap;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ResourceApi.prototype, \"eventAllow\", {\n    get: function get() {\n      return this._resource.ui.allows[0] || null;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ResourceApi.prototype, \"eventBackgroundColor\", {\n    get: function get() {\n      return this._resource.ui.backgroundColor;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ResourceApi.prototype, \"eventBorderColor\", {\n    get: function get() {\n      return this._resource.ui.borderColor;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ResourceApi.prototype, \"eventTextColor\", {\n    get: function get() {\n      return this._resource.ui.textColor;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ResourceApi.prototype, \"eventClassNames\", {\n    // NOTE: user can't modify these because Object.freeze was called in event-def parsing\n    get: function get() {\n      return this._resource.ui.classNames;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ResourceApi.prototype, \"extendedProps\", {\n    get: function get() {\n      return this._resource.extendedProps;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  ResourceApi.prototype.toPlainObject = function (settings) {\n    if (settings === void 0) {\n      settings = {};\n    }\n\n    var internal = this._resource;\n    var ui = internal.ui;\n    var publicId = this.id;\n    var res = {};\n\n    if (publicId) {\n      res.id = publicId;\n    }\n\n    if (internal.title) {\n      res.title = internal.title;\n    }\n\n    if (settings.collapseEventColor && ui.backgroundColor && ui.backgroundColor === ui.borderColor) {\n      res.eventColor = ui.backgroundColor;\n    } else {\n      if (ui.backgroundColor) {\n        res.eventBackgroundColor = ui.backgroundColor;\n      }\n\n      if (ui.borderColor) {\n        res.eventBorderColor = ui.borderColor;\n      }\n    }\n\n    if (ui.textColor) {\n      res.eventTextColor = ui.textColor;\n    }\n\n    if (ui.classNames.length) {\n      res.eventClassNames = ui.classNames;\n    }\n\n    if (Object.keys(internal.extendedProps).length) {\n      if (settings.collapseExtendedProps) {\n        __assign(res, internal.extendedProps);\n      } else {\n        res.extendedProps = internal.extendedProps;\n      }\n    }\n\n    return res;\n  };\n\n  ResourceApi.prototype.toJSON = function () {\n    return this.toPlainObject();\n  };\n\n  return ResourceApi;\n}();\n\nfunction buildResourceApis(resourceStore, context) {\n  var resourceApis = [];\n\n  for (var resourceId in resourceStore) {\n    resourceApis.push(new ResourceApi(context, resourceStore[resourceId]));\n  }\n\n  return resourceApis;\n}\n\nCalendarApi.prototype.addResource = function (input, scrollTo) {\n  var _a;\n\n  var _this = this;\n\n  if (scrollTo === void 0) {\n    scrollTo = true;\n  }\n\n  var currentState = this.getCurrentData();\n  var resourceHash;\n  var resource;\n\n  if (input instanceof ResourceApi) {\n    resource = input._resource;\n    resourceHash = (_a = {}, _a[resource.id] = resource, _a);\n  } else {\n    resourceHash = {};\n    resource = parseResource(input, '', resourceHash, currentState);\n  }\n\n  this.dispatch({\n    type: 'ADD_RESOURCE',\n    resourceHash: resourceHash\n  });\n\n  if (scrollTo) {\n    // TODO: wait til dispatch completes somehow\n    this.trigger('_scrollRequest', {\n      resourceId: resource.id\n    });\n  }\n\n  var resourceApi = new ResourceApi(currentState, resource);\n  currentState.emitter.trigger('resourceAdd', {\n    resource: resourceApi,\n    revert: function revert() {\n      _this.dispatch({\n        type: 'REMOVE_RESOURCE',\n        resourceId: resource.id\n      });\n    }\n  });\n  return resourceApi;\n};\n\nCalendarApi.prototype.getResourceById = function (id) {\n  id = String(id);\n  var currentState = this.getCurrentData(); // eslint-disable-line react/no-this-in-sfc\n\n  if (currentState.resourceStore) {\n    // guard against calendar with no resource functionality\n    var rawResource = currentState.resourceStore[id];\n\n    if (rawResource) {\n      return new ResourceApi(currentState, rawResource);\n    }\n  }\n\n  return null;\n};\n\nCalendarApi.prototype.getResources = function () {\n  var currentState = this.getCurrentData();\n  var resourceStore = currentState.resourceStore;\n  var resourceApis = [];\n\n  if (resourceStore) {\n    // guard against calendar with no resource functionality\n    for (var resourceId in resourceStore) {\n      resourceApis.push(new ResourceApi(currentState, resourceStore[resourceId]));\n    }\n  }\n\n  return resourceApis;\n};\n\nCalendarApi.prototype.getTopLevelResources = function () {\n  var currentState = this.getCurrentData();\n  var resourceStore = currentState.resourceStore;\n  var resourceApis = [];\n\n  if (resourceStore) {\n    // guard against calendar with no resource functionality\n    for (var resourceId in resourceStore) {\n      if (!resourceStore[resourceId].parentId) {\n        resourceApis.push(new ResourceApi(currentState, resourceStore[resourceId]));\n      }\n    }\n  }\n\n  return resourceApis;\n};\n\nCalendarApi.prototype.refetchResources = function () {\n  this.dispatch({\n    type: 'REFETCH_RESOURCES'\n  });\n};\n\nfunction transformDatePoint(dateSpan, context) {\n  return dateSpan.resourceId ? {\n    resource: context.calendarApi.getResourceById(dateSpan.resourceId)\n  } : {};\n}\n\nfunction transformDateSpan(dateSpan, context) {\n  return dateSpan.resourceId ? {\n    resource: context.calendarApi.getResourceById(dateSpan.resourceId)\n  } : {};\n}\n/*\nsplits things BASED OFF OF which resources they are associated with.\ncreates a '' entry which is when something has NO resource.\n*/\n\n\nvar ResourceSplitter =\n/** @class */\nfunction (_super) {\n  __extends(ResourceSplitter, _super);\n\n  function ResourceSplitter() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  ResourceSplitter.prototype.getKeyInfo = function (props) {\n    return __assign({\n      '': {}\n    }, props.resourceStore);\n  };\n\n  ResourceSplitter.prototype.getKeysForDateSpan = function (dateSpan) {\n    return [dateSpan.resourceId || ''];\n  };\n\n  ResourceSplitter.prototype.getKeysForEventDef = function (eventDef) {\n    var resourceIds = eventDef.resourceIds;\n\n    if (!resourceIds.length) {\n      return [''];\n    }\n\n    return resourceIds;\n  };\n\n  return ResourceSplitter;\n}(Splitter);\n\nfunction isPropsValidWithResources(combinedProps, context) {\n  var splitter = new ResourceSplitter();\n  var sets = splitter.splitProps(__assign(__assign({}, combinedProps), {\n    resourceStore: context.getCurrentData().resourceStore\n  }));\n\n  for (var resourceId in sets) {\n    var props = sets[resourceId]; // merge in event data from the non-resource segment\n\n    if (resourceId && sets['']) {\n      // current segment is not the non-resource one, and there IS a non-resource one\n      props = __assign(__assign({}, props), {\n        eventStore: mergeEventStores(sets[''].eventStore, props.eventStore),\n        eventUiBases: __assign(__assign({}, sets[''].eventUiBases), props.eventUiBases)\n      });\n    }\n\n    if (!isPropsValid(props, context, {\n      resourceId: resourceId\n    }, filterConfig.bind(null, resourceId))) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction filterConfig(resourceId, config) {\n  return __assign(__assign({}, config), {\n    constraints: filterConstraints(resourceId, config.constraints)\n  });\n}\n\nfunction filterConstraints(resourceId, constraints) {\n  return constraints.map(function (constraint) {\n    var defs = constraint.defs;\n\n    if (defs) {\n      // we are dealing with an EventStore\n      // if any of the events define constraints to resources that are NOT this resource,\n      // then this resource is unconditionally prohibited, which is what a `false` value does.\n      for (var defId in defs) {\n        var resourceIds = defs[defId].resourceIds;\n\n        if (resourceIds.length && resourceIds.indexOf(resourceId) === -1) {\n          // TODO: use a hash?!!! (for other reasons too)\n          return false;\n        }\n      }\n    }\n\n    return constraint;\n  });\n}\n\nfunction transformExternalDef(dateSpan) {\n  return dateSpan.resourceId ? {\n    resourceId: dateSpan.resourceId\n  } : {};\n}\n\nEventApi.prototype.getResources = function () {\n  var calendarApi = this._context.calendarApi;\n  return this._def.resourceIds.map(function (resourceId) {\n    return calendarApi.getResourceById(resourceId);\n  });\n};\n\nEventApi.prototype.setResources = function (resources) {\n  var resourceIds = []; // massage resources -> resourceIds\n\n  for (var _i = 0, resources_1 = resources; _i < resources_1.length; _i++) {\n    var resource = resources_1[_i];\n    var resourceId = null;\n\n    if (typeof resource === 'string') {\n      resourceId = resource;\n    } else if (typeof resource === 'number') {\n      resourceId = String(resource);\n    } else if (resource instanceof ResourceApi) {\n      resourceId = resource.id; // guaranteed to always have an ID. hmmm\n    } else {\n      console.warn('unknown resource type: ' + resource);\n    }\n\n    if (resourceId) {\n      resourceIds.push(resourceId);\n    }\n  }\n\n  this.mutate({\n    standardProps: {\n      resourceIds: resourceIds\n    }\n  });\n};\n\nvar optionChangeHandlers = {\n  resources: handleResources\n};\n\nfunction handleResources(newSourceInput, context) {\n  var oldSourceInput = context.getCurrentData().resourceSource._raw;\n\n  if (oldSourceInput !== newSourceInput) {\n    context.dispatch({\n      type: 'RESET_RESOURCE_SOURCE',\n      resourceSourceInput: newSourceInput\n    });\n  }\n}\n\nvar DEFAULT_RESOURCE_ORDER = parseFieldSpecs('id,title');\n\nfunction handleResourceStore(resourceStore, calendarData) {\n  var emitter = calendarData.emitter;\n\n  if (emitter.hasHandlers('resourcesSet')) {\n    emitter.trigger('resourcesSet', buildResourceApis(resourceStore, calendarData));\n  }\n}\n\nvar OPTION_REFINERS = {\n  initialResources: identity,\n  resources: identity,\n  eventResourceEditable: Boolean,\n  refetchResourcesOnNavigate: Boolean,\n  resourceOrder: parseFieldSpecs,\n  filterResourcesWithEvents: Boolean,\n  resourceGroupField: String,\n  resourceAreaWidth: identity,\n  resourceAreaColumns: identity,\n  resourcesInitiallyExpanded: Boolean,\n  datesAboveResources: Boolean,\n  needsResourceData: Boolean,\n  resourceAreaHeaderClassNames: identity,\n  resourceAreaHeaderContent: identity,\n  resourceAreaHeaderDidMount: identity,\n  resourceAreaHeaderWillUnmount: identity,\n  resourceGroupLabelClassNames: identity,\n  resourceGroupLabelContent: identity,\n  resourceGroupLabelDidMount: identity,\n  resourceGroupLabelWillUnmount: identity,\n  resourceLabelClassNames: identity,\n  resourceLabelContent: identity,\n  resourceLabelDidMount: identity,\n  resourceLabelWillUnmount: identity,\n  resourceLaneClassNames: identity,\n  resourceLaneContent: identity,\n  resourceLaneDidMount: identity,\n  resourceLaneWillUnmount: identity,\n  resourceGroupLaneClassNames: identity,\n  resourceGroupLaneContent: identity,\n  resourceGroupLaneDidMount: identity,\n  resourceGroupLaneWillUnmount: identity\n};\nvar LISTENER_REFINERS = {\n  resourcesSet: identity,\n  resourceAdd: identity,\n  resourceChange: identity,\n  resourceRemove: identity\n};\nregisterResourceSourceDef({\n  ignoreRange: true,\n  parseMeta: function parseMeta(refined) {\n    if (Array.isArray(refined.resources)) {\n      return refined.resources;\n    }\n\n    return null;\n  },\n  fetch: function fetch(arg, successCallback) {\n    successCallback({\n      rawResources: arg.resourceSource.meta\n    });\n  }\n});\nregisterResourceSourceDef({\n  parseMeta: function parseMeta(refined) {\n    if (typeof refined.resources === 'function') {\n      return refined.resources;\n    }\n\n    return null;\n  },\n  fetch: function fetch(arg, success, failure) {\n    var dateEnv = arg.context.dateEnv;\n    var func = arg.resourceSource.meta;\n    var publicArg = arg.range ? {\n      start: dateEnv.toDate(arg.range.start),\n      end: dateEnv.toDate(arg.range.end),\n      startStr: dateEnv.formatIso(arg.range.start),\n      endStr: dateEnv.formatIso(arg.range.end),\n      timeZone: dateEnv.timeZone\n    } : {}; // TODO: make more dry with EventSourceFunc\n    // TODO: accept a response?\n\n    unpromisify(func.bind(null, publicArg), function (rawResources) {\n      success({\n        rawResources: rawResources\n      }); // needs an object response\n    }, failure);\n  }\n});\nregisterResourceSourceDef({\n  parseMeta: function parseMeta(refined) {\n    if (refined.url) {\n      return {\n        url: refined.url,\n        method: (refined.method || 'GET').toUpperCase(),\n        extraParams: refined.extraParams\n      };\n    }\n\n    return null;\n  },\n  fetch: function fetch(arg, successCallback, failureCallback) {\n    var meta = arg.resourceSource.meta;\n    var requestParams = buildRequestParams(meta, arg.range, arg.context);\n    requestJson(meta.method, meta.url, requestParams, function (rawResources, xhr) {\n      successCallback({\n        rawResources: rawResources,\n        xhr: xhr\n      });\n    }, function (message, xhr) {\n      failureCallback({\n        message: message,\n        xhr: xhr\n      });\n    });\n  }\n}); // TODO: somehow consolidate with event json feed\n\nfunction buildRequestParams(meta, range, context) {\n  var dateEnv = context.dateEnv,\n      options = context.options;\n  var startParam;\n  var endParam;\n  var timeZoneParam;\n  var customRequestParams;\n  var params = {};\n\n  if (range) {\n    startParam = meta.startParam;\n\n    if (startParam == null) {\n      startParam = options.startParam;\n    }\n\n    endParam = meta.endParam;\n\n    if (endParam == null) {\n      endParam = options.endParam;\n    }\n\n    timeZoneParam = meta.timeZoneParam;\n\n    if (timeZoneParam == null) {\n      timeZoneParam = options.timeZoneParam;\n    }\n\n    params[startParam] = dateEnv.formatIso(range.start);\n    params[endParam] = dateEnv.formatIso(range.end);\n\n    if (dateEnv.timeZone !== 'local') {\n      params[timeZoneParam] = dateEnv.timeZone;\n    }\n  } // retrieve any outbound GET/POST data from the options\n\n\n  if (typeof meta.extraParams === 'function') {\n    // supplied as a function that returns a key/value object\n    customRequestParams = meta.extraParams();\n  } else {\n    // probably supplied as a straight key/value object\n    customRequestParams = meta.extraParams || {};\n  }\n\n  __assign(params, customRequestParams);\n\n  return params;\n} // TODO: not used for Spreadsheet. START USING. difficult because of col-specific rendering props\n\n\nfunction ResourceLabelRoot(props) {\n  return createElement(ViewContextType.Consumer, null, function (context) {\n    var options = context.options;\n    var hookProps = {\n      resource: new ResourceApi(context, props.resource),\n      date: props.date ? context.dateEnv.toDate(props.date) : null,\n      view: context.viewApi\n    };\n    var dataAttrs = {\n      'data-resource-id': props.resource.id,\n      'data-date': props.date ? formatDayString(props.date) : undefined\n    };\n    return createElement(RenderHook, {\n      hookProps: hookProps,\n      classNames: options.resourceLabelClassNames,\n      content: options.resourceLabelContent,\n      defaultContent: renderInnerContent,\n      didMount: options.resourceLabelDidMount,\n      willUnmount: options.resourceLabelWillUnmount\n    }, function (rootElRef, classNames, innerElRef, innerContent) {\n      return props.children(rootElRef, classNames, // TODO: pass in 'fc-resource' ?\n      dataAttrs, innerElRef, innerContent);\n    });\n  });\n}\n\nfunction renderInnerContent(props) {\n  return props.resource.title || props.resource.id;\n}\n\nvar ResourceCell =\n/** @class */\nfunction (_super) {\n  __extends(ResourceCell, _super);\n\n  function ResourceCell() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  ResourceCell.prototype.render = function () {\n    var props = this.props;\n    return createElement(ResourceLabelRoot, {\n      resource: props.resource,\n      date: props.date\n    }, function (elRef, customClassNames, dataAttrs, innerElRef, innerContent) {\n      return createElement(\"th\", __assign({\n        ref: elRef,\n        role: \"columnheader\",\n        className: ['fc-col-header-cell', 'fc-resource'].concat(customClassNames).join(' '),\n        colSpan: props.colSpan\n      }, dataAttrs), createElement(\"div\", {\n        className: \"fc-scrollgrid-sync-inner\"\n      }, createElement(\"span\", {\n        className: ['fc-col-header-cell-cushion', props.isSticky ? 'fc-sticky' : ''].join(' '),\n        ref: innerElRef\n      }, innerContent)));\n    });\n  };\n\n  return ResourceCell;\n}(BaseComponent);\n\nvar ResourceDayHeader =\n/** @class */\nfunction (_super) {\n  __extends(ResourceDayHeader, _super);\n\n  function ResourceDayHeader() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.buildDateFormat = memoize(buildDateFormat);\n    return _this;\n  }\n\n  ResourceDayHeader.prototype.render = function () {\n    var _this = this;\n\n    var _a = this,\n        props = _a.props,\n        context = _a.context;\n\n    var dateFormat = this.buildDateFormat(context.options.dayHeaderFormat, props.datesRepDistinctDays, props.dates.length);\n    return createElement(NowTimer, {\n      unit: \"day\"\n    }, function (nowDate, todayRange) {\n      if (props.dates.length === 1) {\n        return _this.renderResourceRow(props.resources, props.dates[0]);\n      }\n\n      if (context.options.datesAboveResources) {\n        return _this.renderDayAndResourceRows(props.dates, dateFormat, todayRange, props.resources);\n      }\n\n      return _this.renderResourceAndDayRows(props.resources, props.dates, dateFormat, todayRange);\n    });\n  };\n\n  ResourceDayHeader.prototype.renderResourceRow = function (resources, date) {\n    var resourceCells = resources.map(function (resource) {\n      return createElement(ResourceCell, {\n        key: resource.id,\n        resource: resource,\n        colSpan: 1,\n        date: date\n      });\n    });\n    return this.buildTr(resourceCells, 'resources');\n  };\n\n  ResourceDayHeader.prototype.renderDayAndResourceRows = function (dates, dateFormat, todayRange, resources) {\n    var dateCells = [];\n    var resourceCells = [];\n\n    for (var _i = 0, dates_1 = dates; _i < dates_1.length; _i++) {\n      var date = dates_1[_i];\n      dateCells.push(this.renderDateCell(date, dateFormat, todayRange, resources.length, null, true));\n\n      for (var _a = 0, resources_1 = resources; _a < resources_1.length; _a++) {\n        var resource = resources_1[_a];\n        resourceCells.push(createElement(ResourceCell, {\n          key: resource.id + ':' + date.toISOString(),\n          resource: resource,\n          colSpan: 1,\n          date: date\n        }));\n      }\n    }\n\n    return createElement(Fragment, null, this.buildTr(dateCells, 'day'), this.buildTr(resourceCells, 'resources'));\n  };\n\n  ResourceDayHeader.prototype.renderResourceAndDayRows = function (resources, dates, dateFormat, todayRange) {\n    var resourceCells = [];\n    var dateCells = [];\n\n    for (var _i = 0, resources_2 = resources; _i < resources_2.length; _i++) {\n      var resource = resources_2[_i];\n      resourceCells.push(createElement(ResourceCell, {\n        key: resource.id,\n        resource: resource,\n        colSpan: dates.length,\n        isSticky: true\n      }));\n\n      for (var _a = 0, dates_2 = dates; _a < dates_2.length; _a++) {\n        var date = dates_2[_a];\n        dateCells.push(this.renderDateCell(date, dateFormat, todayRange, 1, resource));\n      }\n    }\n\n    return createElement(Fragment, null, this.buildTr(resourceCells, 'resources'), this.buildTr(dateCells, 'day'));\n  }; // a cell with date text. might have a resource associated with it\n\n\n  ResourceDayHeader.prototype.renderDateCell = function (date, dateFormat, todayRange, colSpan, resource, isSticky) {\n    var props = this.props;\n    var keyPostfix = resource ? \":\" + resource.id : '';\n    var extraHookProps = resource ? {\n      resource: new ResourceApi(this.context, resource)\n    } : {};\n    var extraDataAttrs = resource ? {\n      'data-resource-id': resource.id\n    } : {};\n    return props.datesRepDistinctDays ? createElement(TableDateCell, {\n      key: date.toISOString() + keyPostfix,\n      date: date,\n      dateProfile: props.dateProfile,\n      todayRange: todayRange,\n      colCnt: props.dates.length * props.resources.length,\n      dayHeaderFormat: dateFormat,\n      colSpan: colSpan,\n      isSticky: isSticky,\n      extraHookProps: extraHookProps,\n      extraDataAttrs: extraDataAttrs\n    }) : createElement(TableDowCell // we can't leverage the pure-componentness becausae the extra* props are new every time :(\n    , {\n      key: date.getUTCDay() + keyPostfix,\n      dow: date.getUTCDay(),\n      dayHeaderFormat: dateFormat,\n      colSpan: colSpan,\n      isSticky: isSticky,\n      extraHookProps: extraHookProps,\n      extraDataAttrs: extraDataAttrs\n    });\n  };\n\n  ResourceDayHeader.prototype.buildTr = function (cells, key) {\n    var renderIntro = this.props.renderIntro;\n\n    if (!cells.length) {\n      cells = [createElement(\"td\", {\n        key: 0\n      }, \"\\xA0\")];\n    }\n\n    return createElement(\"tr\", {\n      key: key,\n      role: \"row\"\n    }, renderIntro && renderIntro(key), cells);\n  };\n\n  return ResourceDayHeader;\n}(BaseComponent);\n\nfunction buildDateFormat(dayHeaderFormat, datesRepDistinctDays, dayCnt) {\n  return dayHeaderFormat || computeFallbackHeaderFormat(datesRepDistinctDays, dayCnt);\n}\n\nvar ResourceIndex =\n/** @class */\nfunction () {\n  function ResourceIndex(resources) {\n    var indicesById = {};\n    var ids = [];\n\n    for (var i = 0; i < resources.length; i += 1) {\n      var id = resources[i].id;\n      ids.push(id);\n      indicesById[id] = i;\n    }\n\n    this.ids = ids;\n    this.indicesById = indicesById;\n    this.length = resources.length;\n  }\n\n  return ResourceIndex;\n}();\n\nvar AbstractResourceDayTableModel =\n/** @class */\nfunction () {\n  function AbstractResourceDayTableModel(dayTableModel, resources, context) {\n    this.dayTableModel = dayTableModel;\n    this.resources = resources;\n    this.context = context;\n    this.resourceIndex = new ResourceIndex(resources);\n    this.rowCnt = dayTableModel.rowCnt;\n    this.colCnt = dayTableModel.colCnt * resources.length;\n    this.cells = this.buildCells();\n  }\n\n  AbstractResourceDayTableModel.prototype.buildCells = function () {\n    var _a = this,\n        rowCnt = _a.rowCnt,\n        dayTableModel = _a.dayTableModel,\n        resources = _a.resources;\n\n    var rows = [];\n\n    for (var row = 0; row < rowCnt; row += 1) {\n      var rowCells = [];\n\n      for (var dateCol = 0; dateCol < dayTableModel.colCnt; dateCol += 1) {\n        for (var resourceCol = 0; resourceCol < resources.length; resourceCol += 1) {\n          var resource = resources[resourceCol];\n          var extraHookProps = {\n            resource: new ResourceApi(this.context, resource)\n          };\n          var extraDataAttrs = {\n            'data-resource-id': resource.id\n          };\n          var extraClassNames = ['fc-resource'];\n          var extraDateSpan = {\n            resourceId: resource.id\n          };\n          var date = dayTableModel.cells[row][dateCol].date;\n          rowCells[this.computeCol(dateCol, resourceCol)] = {\n            key: resource.id + ':' + date.toISOString(),\n            date: date,\n            extraHookProps: extraHookProps,\n            extraDataAttrs: extraDataAttrs,\n            extraClassNames: extraClassNames,\n            extraDateSpan: extraDateSpan\n          };\n        }\n      }\n\n      rows.push(rowCells);\n    }\n\n    return rows;\n  };\n\n  return AbstractResourceDayTableModel;\n}();\n/*\nresources over dates\n*/\n\n\nvar ResourceDayTableModel =\n/** @class */\nfunction (_super) {\n  __extends(ResourceDayTableModel, _super);\n\n  function ResourceDayTableModel() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  ResourceDayTableModel.prototype.computeCol = function (dateI, resourceI) {\n    return resourceI * this.dayTableModel.colCnt + dateI;\n  };\n  /*\n  all date ranges are intact\n  */\n\n\n  ResourceDayTableModel.prototype.computeColRanges = function (dateStartI, dateEndI, resourceI) {\n    return [{\n      firstCol: this.computeCol(dateStartI, resourceI),\n      lastCol: this.computeCol(dateEndI, resourceI),\n      isStart: true,\n      isEnd: true\n    }];\n  };\n\n  return ResourceDayTableModel;\n}(AbstractResourceDayTableModel);\n/*\ndates over resources\n*/\n\n\nvar DayResourceTableModel =\n/** @class */\nfunction (_super) {\n  __extends(DayResourceTableModel, _super);\n\n  function DayResourceTableModel() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  DayResourceTableModel.prototype.computeCol = function (dateI, resourceI) {\n    return dateI * this.resources.length + resourceI;\n  };\n  /*\n  every single day is broken up\n  */\n\n\n  DayResourceTableModel.prototype.computeColRanges = function (dateStartI, dateEndI, resourceI) {\n    var segs = [];\n\n    for (var i = dateStartI; i <= dateEndI; i += 1) {\n      var col = this.computeCol(i, resourceI);\n      segs.push({\n        firstCol: col,\n        lastCol: col,\n        isStart: i === dateStartI,\n        isEnd: i === dateEndI\n      });\n    }\n\n    return segs;\n  };\n\n  return DayResourceTableModel;\n}(AbstractResourceDayTableModel);\n\nvar NO_SEGS = []; // for memoizing\n\nvar VResourceJoiner =\n/** @class */\nfunction () {\n  function VResourceJoiner() {\n    this.joinDateSelection = memoize(this.joinSegs);\n    this.joinBusinessHours = memoize(this.joinSegs);\n    this.joinFgEvents = memoize(this.joinSegs);\n    this.joinBgEvents = memoize(this.joinSegs);\n    this.joinEventDrags = memoize(this.joinInteractions);\n    this.joinEventResizes = memoize(this.joinInteractions);\n  }\n  /*\n  propSets also has a '' key for things with no resource\n  */\n\n\n  VResourceJoiner.prototype.joinProps = function (propSets, resourceDayTable) {\n    var dateSelectionSets = [];\n    var businessHoursSets = [];\n    var fgEventSets = [];\n    var bgEventSets = [];\n    var eventDrags = [];\n    var eventResizes = [];\n    var eventSelection = '';\n    var keys = resourceDayTable.resourceIndex.ids.concat(['']); // add in the all-resource key\n\n    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n      var key = keys_1[_i];\n      var props = propSets[key];\n      dateSelectionSets.push(props.dateSelectionSegs);\n      businessHoursSets.push(key ? props.businessHourSegs : NO_SEGS); // don't include redundant all-resource businesshours\n\n      fgEventSets.push(key ? props.fgEventSegs : NO_SEGS); // don't include fg all-resource segs\n\n      bgEventSets.push(props.bgEventSegs);\n      eventDrags.push(props.eventDrag);\n      eventResizes.push(props.eventResize);\n      eventSelection = eventSelection || props.eventSelection;\n    }\n\n    return {\n      dateSelectionSegs: this.joinDateSelection.apply(this, __spreadArray([resourceDayTable], dateSelectionSets)),\n      businessHourSegs: this.joinBusinessHours.apply(this, __spreadArray([resourceDayTable], businessHoursSets)),\n      fgEventSegs: this.joinFgEvents.apply(this, __spreadArray([resourceDayTable], fgEventSets)),\n      bgEventSegs: this.joinBgEvents.apply(this, __spreadArray([resourceDayTable], bgEventSets)),\n      eventDrag: this.joinEventDrags.apply(this, __spreadArray([resourceDayTable], eventDrags)),\n      eventResize: this.joinEventResizes.apply(this, __spreadArray([resourceDayTable], eventResizes)),\n      eventSelection: eventSelection\n    };\n  };\n\n  VResourceJoiner.prototype.joinSegs = function (resourceDayTable) {\n    var segGroups = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      segGroups[_i - 1] = arguments[_i];\n    }\n\n    var resourceCnt = resourceDayTable.resources.length;\n    var transformedSegs = [];\n\n    for (var i = 0; i < resourceCnt; i += 1) {\n      for (var _a = 0, _b = segGroups[i]; _a < _b.length; _a++) {\n        var seg = _b[_a];\n        transformedSegs.push.apply(transformedSegs, this.transformSeg(seg, resourceDayTable, i));\n      }\n\n      for (var _c = 0, _d = segGroups[resourceCnt]; _c < _d.length; _c++) {\n        // one beyond. the all-resource\n        var seg = _d[_c];\n        transformedSegs.push.apply( // one beyond. the all-resource\n        transformedSegs, this.transformSeg(seg, resourceDayTable, i));\n      }\n    }\n\n    return transformedSegs;\n  };\n  /*\n  for expanding non-resource segs to all resources.\n  only for public use.\n  no memoizing.\n  */\n\n\n  VResourceJoiner.prototype.expandSegs = function (resourceDayTable, segs) {\n    var resourceCnt = resourceDayTable.resources.length;\n    var transformedSegs = [];\n\n    for (var i = 0; i < resourceCnt; i += 1) {\n      for (var _i = 0, segs_1 = segs; _i < segs_1.length; _i++) {\n        var seg = segs_1[_i];\n        transformedSegs.push.apply(transformedSegs, this.transformSeg(seg, resourceDayTable, i));\n      }\n    }\n\n    return transformedSegs;\n  };\n\n  VResourceJoiner.prototype.joinInteractions = function (resourceDayTable) {\n    var interactions = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      interactions[_i - 1] = arguments[_i];\n    }\n\n    var resourceCnt = resourceDayTable.resources.length;\n    var affectedInstances = {};\n    var transformedSegs = [];\n    var anyInteractions = false;\n    var isEvent = false;\n\n    for (var i = 0; i < resourceCnt; i += 1) {\n      var interaction = interactions[i];\n\n      if (interaction) {\n        anyInteractions = true;\n\n        for (var _a = 0, _b = interaction.segs; _a < _b.length; _a++) {\n          var seg = _b[_a];\n          transformedSegs.push.apply(transformedSegs, this.transformSeg(seg, resourceDayTable, i));\n        }\n\n        __assign(affectedInstances, interaction.affectedInstances);\n\n        isEvent = isEvent || interaction.isEvent;\n      }\n\n      if (interactions[resourceCnt]) {\n        // one beyond. the all-resource\n        for (var _c = 0, _d = interactions[resourceCnt].segs; _c < _d.length; _c++) {\n          var seg = _d[_c];\n          transformedSegs.push.apply(transformedSegs, this.transformSeg(seg, resourceDayTable, i));\n        }\n      }\n    }\n\n    if (anyInteractions) {\n      return {\n        affectedInstances: affectedInstances,\n        segs: transformedSegs,\n        isEvent: isEvent\n      };\n    }\n\n    return null;\n  };\n\n  return VResourceJoiner;\n}();\n/*\nTODO: just use ResourceHash somehow? could then use the generic ResourceSplitter\n*/\n\n\nvar VResourceSplitter =\n/** @class */\nfunction (_super) {\n  __extends(VResourceSplitter, _super);\n\n  function VResourceSplitter() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  VResourceSplitter.prototype.getKeyInfo = function (props) {\n    var resourceDayTableModel = props.resourceDayTableModel;\n    var hash = mapHash(resourceDayTableModel.resourceIndex.indicesById, function (i) {\n      return resourceDayTableModel.resources[i];\n    }); // :(\n\n    hash[''] = {};\n    return hash;\n  };\n\n  VResourceSplitter.prototype.getKeysForDateSpan = function (dateSpan) {\n    return [dateSpan.resourceId || ''];\n  };\n\n  VResourceSplitter.prototype.getKeysForEventDef = function (eventDef) {\n    var resourceIds = eventDef.resourceIds;\n\n    if (!resourceIds.length) {\n      return [''];\n    }\n\n    return resourceIds;\n  };\n\n  return VResourceSplitter;\n}(Splitter);\n/*\ndoesn't accept grouping\n*/\n\n\nfunction flattenResources(resourceStore, orderSpecs) {\n  return buildRowNodes(resourceStore, [], orderSpecs, false, {}, true).map(function (node) {\n    return node.resource;\n  });\n}\n\nfunction buildRowNodes(resourceStore, groupSpecs, orderSpecs, isVGrouping, expansions, expansionDefault) {\n  var complexNodes = buildHierarchy(resourceStore, isVGrouping ? -1 : 1, groupSpecs, orderSpecs);\n  var flatNodes = [];\n  flattenNodes(complexNodes, flatNodes, isVGrouping, [], 0, expansions, expansionDefault);\n  return flatNodes;\n}\n\nfunction flattenNodes(complexNodes, res, isVGrouping, rowSpans, depth, expansions, expansionDefault) {\n  for (var i = 0; i < complexNodes.length; i += 1) {\n    var complexNode = complexNodes[i];\n    var group = complexNode.group;\n\n    if (group) {\n      if (isVGrouping) {\n        var firstRowIndex = res.length;\n        var rowSpanIndex = rowSpans.length;\n        flattenNodes(complexNode.children, res, isVGrouping, rowSpans.concat(0), depth, expansions, expansionDefault);\n\n        if (firstRowIndex < res.length) {\n          var firstRow = res[firstRowIndex];\n          var firstRowSpans = firstRow.rowSpans = firstRow.rowSpans.slice();\n          firstRowSpans[rowSpanIndex] = res.length - firstRowIndex;\n        }\n      } else {\n        var id = group.spec.field + ':' + group.value;\n        var isExpanded = expansions[id] != null ? expansions[id] : expansionDefault;\n        res.push({\n          id: id,\n          group: group,\n          isExpanded: isExpanded\n        });\n\n        if (isExpanded) {\n          flattenNodes(complexNode.children, res, isVGrouping, rowSpans, depth + 1, expansions, expansionDefault);\n        }\n      }\n    } else if (complexNode.resource) {\n      var id = complexNode.resource.id;\n      var isExpanded = expansions[id] != null ? expansions[id] : expansionDefault;\n      res.push({\n        id: id,\n        rowSpans: rowSpans,\n        depth: depth,\n        isExpanded: isExpanded,\n        hasChildren: Boolean(complexNode.children.length),\n        resource: complexNode.resource,\n        resourceFields: complexNode.resourceFields\n      });\n\n      if (isExpanded) {\n        flattenNodes(complexNode.children, res, isVGrouping, rowSpans, depth + 1, expansions, expansionDefault);\n      }\n    }\n  }\n}\n\nfunction buildHierarchy(resourceStore, maxDepth, groupSpecs, orderSpecs) {\n  var resourceNodes = buildResourceNodes(resourceStore, orderSpecs);\n  var builtNodes = [];\n\n  for (var resourceId in resourceNodes) {\n    var resourceNode = resourceNodes[resourceId];\n\n    if (!resourceNode.resource.parentId) {\n      insertResourceNode(resourceNode, builtNodes, groupSpecs, 0, maxDepth, orderSpecs);\n    }\n  }\n\n  return builtNodes;\n}\n\nfunction buildResourceNodes(resourceStore, orderSpecs) {\n  var nodeHash = {};\n\n  for (var resourceId in resourceStore) {\n    var resource = resourceStore[resourceId];\n    nodeHash[resourceId] = {\n      resource: resource,\n      resourceFields: buildResourceFields(resource),\n      children: []\n    };\n  }\n\n  for (var resourceId in resourceStore) {\n    var resource = resourceStore[resourceId];\n\n    if (resource.parentId) {\n      var parentNode = nodeHash[resource.parentId];\n\n      if (parentNode) {\n        insertResourceNodeInSiblings(nodeHash[resourceId], parentNode.children, orderSpecs);\n      }\n    }\n  }\n\n  return nodeHash;\n}\n\nfunction insertResourceNode(resourceNode, nodes, groupSpecs, depth, maxDepth, orderSpecs) {\n  if (groupSpecs.length && (maxDepth === -1 || depth <= maxDepth)) {\n    var groupNode = ensureGroupNodes(resourceNode, nodes, groupSpecs[0]);\n    insertResourceNode(resourceNode, groupNode.children, groupSpecs.slice(1), depth + 1, maxDepth, orderSpecs);\n  } else {\n    insertResourceNodeInSiblings(resourceNode, nodes, orderSpecs);\n  }\n}\n\nfunction ensureGroupNodes(resourceNode, nodes, groupSpec) {\n  var groupValue = resourceNode.resourceFields[groupSpec.field];\n  var groupNode;\n  var newGroupIndex; // find an existing group that matches, or determine the position for a new group\n\n  if (groupSpec.order) {\n    for (newGroupIndex = 0; newGroupIndex < nodes.length; newGroupIndex += 1) {\n      var node = nodes[newGroupIndex];\n\n      if (node.group) {\n        var cmp = flexibleCompare(groupValue, node.group.value) * groupSpec.order;\n\n        if (cmp === 0) {\n          groupNode = node;\n          break;\n        } else if (cmp < 0) {\n          break;\n        }\n      }\n    }\n  } else {\n    // the groups are unordered\n    for (newGroupIndex = 0; newGroupIndex < nodes.length; newGroupIndex += 1) {\n      var node = nodes[newGroupIndex];\n\n      if (node.group && groupValue === node.group.value) {\n        groupNode = node;\n        break;\n      }\n    }\n  }\n\n  if (!groupNode) {\n    groupNode = {\n      group: {\n        value: groupValue,\n        spec: groupSpec\n      },\n      children: []\n    };\n    nodes.splice(newGroupIndex, 0, groupNode);\n  }\n\n  return groupNode;\n}\n\nfunction insertResourceNodeInSiblings(resourceNode, siblings, orderSpecs) {\n  var i;\n\n  for (i = 0; i < siblings.length; i += 1) {\n    var cmp = compareByFieldSpecs(siblings[i].resourceFields, resourceNode.resourceFields, orderSpecs); // TODO: pass in ResourceApi?\n\n    if (cmp > 0) {\n      // went 1 past. insert at i\n      break;\n    }\n  }\n\n  siblings.splice(i, 0, resourceNode);\n}\n\nfunction buildResourceFields(resource) {\n  var obj = __assign(__assign(__assign({}, resource.extendedProps), resource.ui), resource);\n\n  delete obj.ui;\n  delete obj.extendedProps;\n  return obj;\n}\n\nfunction isGroupsEqual(group0, group1) {\n  return group0.spec === group1.spec && group0.value === group1.value;\n}\n\nvar main = createPlugin({\n  deps: [premiumCommonPlugin],\n  reducers: [reduceResources],\n  isLoadingFuncs: [function (state) {\n    return state.resourceSource && state.resourceSource.isFetching;\n  }],\n  eventRefiners: EVENT_REFINERS,\n  eventDefMemberAdders: [generateEventDefResourceMembers],\n  isDraggableTransformers: [transformIsDraggable],\n  eventDragMutationMassagers: [massageEventDragMutation],\n  eventDefMutationAppliers: [applyEventDefMutation],\n  dateSelectionTransformers: [transformDateSelectionJoin],\n  datePointTransforms: [transformDatePoint],\n  dateSpanTransforms: [transformDateSpan],\n  viewPropsTransformers: [ResourceDataAdder, ResourceEventConfigAdder],\n  isPropsValid: isPropsValidWithResources,\n  externalDefTransforms: [transformExternalDef],\n  eventDropTransformers: [transformEventDrop],\n  optionChangeHandlers: optionChangeHandlers,\n  optionRefiners: OPTION_REFINERS,\n  listenerRefiners: LISTENER_REFINERS,\n  propSetHandlers: {\n    resourceStore: handleResourceStore\n  }\n});\nexport default main;\nexport { AbstractResourceDayTableModel, DEFAULT_RESOURCE_ORDER, DayResourceTableModel, ResourceApi, ResourceDayHeader, ResourceDayTableModel, ResourceLabelRoot, ResourceSplitter, VResourceJoiner, VResourceSplitter, buildResourceFields, buildRowNodes, flattenResources, getPublicId, isGroupsEqual };","map":null,"metadata":{},"sourceType":"module"}