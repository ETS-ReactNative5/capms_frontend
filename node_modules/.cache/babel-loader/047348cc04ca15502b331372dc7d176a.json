{"ast":null,"code":"var _objectSpread = require(\"C:\\\\Users\\\\suresoft\\\\Desktop\\\\vomproject\\\\sure-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread2\");\n\nvar _defineProperty = require(\"C:\\\\Users\\\\suresoft\\\\Desktop\\\\vomproject\\\\sure-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/defineProperty\");\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\suresoft\\\\Desktop\\\\vomproject\\\\sure-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\suresoft\\\\Desktop\\\\vomproject\\\\sure-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\suresoft\\\\Desktop\\\\vomproject\\\\sure-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\suresoft\\\\Desktop\\\\vomproject\\\\sure-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _ = require('lodash');\n\nvar _require = require('google-auth-library'),\n    JWT = _require.JWT;\n\nvar Axios = require('axios');\n\nvar GoogleSpreadsheetWorksheet = require('./GoogleSpreadsheetWorksheet');\n\nvar _require2 = require('./utils'),\n    getFieldMask = _require2.getFieldMask;\n\nvar GOOGLE_AUTH_SCOPES = ['https://www.googleapis.com/auth/spreadsheets' // the list from the sheets v4 auth for spreadsheets.get\n// 'https://www.googleapis.com/auth/drive',\n// 'https://www.googleapis.com/auth/drive.readonly',\n// 'https://www.googleapis.com/auth/drive.file',\n// 'https://www.googleapis.com/auth/spreadsheets',\n// 'https://www.googleapis.com/auth/spreadsheets.readonly',\n];\nvar AUTH_MODES = {\n  JWT: 'JWT',\n  API_KEY: 'API_KEY',\n  RAW_ACCESS_TOKEN: 'RAW_ACCESS_TOKEN',\n  OAUTH: 'OAUTH'\n};\n\nvar GoogleSpreadsheet = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function GoogleSpreadsheet(sheetId) {\n    _classCallCheck(this, GoogleSpreadsheet);\n\n    this.spreadsheetId = sheetId;\n    this.authMode = null;\n    this._rawSheets = {};\n    this._rawProperties = null; // create an axios instance with sheet root URL and interceptors to handle auth\n\n    this.axios = Axios.create({\n      baseURL: \"https://sheets.googleapis.com/v4/spreadsheets/\".concat(sheetId || ''),\n      // send arrays in params with duplicate keys - ie `?thing=1&thing=2` vs `?thing[]=1...`\n      // solution taken from https://github.com/axios/axios/issues/604\n      paramsSerializer: function paramsSerializer(params) {\n        var options = '';\n\n        _.keys(params).forEach(function (key) {\n          var isParamTypeObject = typeof params[key] === 'object';\n          var isParamTypeArray = isParamTypeObject && params[key].length >= 0;\n          if (!isParamTypeObject) options += \"\".concat(key, \"=\").concat(encodeURIComponent(params[key]), \"&\");\n\n          if (isParamTypeObject && isParamTypeArray) {\n            _.each(params[key], function (val) {\n              options += \"\".concat(key, \"=\").concat(encodeURIComponent(val), \"&\");\n            });\n          }\n        });\n\n        return options ? options.slice(0, -1) : options;\n      }\n    }); // have to use bind here or the functions dont have access to `this` :(\n\n    this.axios.interceptors.request.use(this._setAxiosRequestAuth.bind(this));\n    this.axios.interceptors.response.use(this._handleAxiosResponse.bind(this), this._handleAxiosErrors.bind(this));\n    return this;\n  } // CREATE NEW DOC ////////////////////////////////////////////////////////////////////////////////\n\n\n  _createClass(GoogleSpreadsheet, [{\n    key: \"createNewSpreadsheetDocument\",\n    value: function () {\n      var _createNewSpreadsheetDocument = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(properties) {\n        var _this = this;\n\n        var response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this.spreadsheetId) {\n                  _context.next = 2;\n                  break;\n                }\n\n                throw new Error('Only call `createNewSpreadsheetDocument()` on a GoogleSpreadsheet object that has no spreadsheetId set');\n\n              case 2:\n                _context.next = 4;\n                return this.axios.post(this.url, {\n                  properties: properties\n                });\n\n              case 4:\n                response = _context.sent;\n                this.spreadsheetId = response.data.spreadsheetId;\n                this.axios.defaults.baseURL += this.spreadsheetId;\n                this._rawProperties = response.data.properties;\n\n                _.each(response.data.sheets, function (s) {\n                  return _this._updateOrCreateSheet(s);\n                });\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function createNewSpreadsheetDocument(_x) {\n        return _createNewSpreadsheetDocument.apply(this, arguments);\n      }\n\n      return createNewSpreadsheetDocument;\n    }() // AUTH RELATED FUNCTIONS ////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"useApiKey\",\n    value: function () {\n      var _useApiKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(key) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.authMode = AUTH_MODES.API_KEY;\n                this.apiKey = key;\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function useApiKey(_x2) {\n        return _useApiKey.apply(this, arguments);\n      }\n\n      return useApiKey;\n    }() // token must be created and managed (refreshed) elsewhere\n\n  }, {\n    key: \"useRawAccessToken\",\n    value: function () {\n      var _useRawAccessToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(token) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this.authMode = AUTH_MODES.RAW_ACCESS_TOKEN;\n                this.accessToken = token;\n\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function useRawAccessToken(_x3) {\n        return _useRawAccessToken.apply(this, arguments);\n      }\n\n      return useRawAccessToken;\n    }()\n  }, {\n    key: \"useOAuth2Client\",\n    value: function () {\n      var _useOAuth2Client = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(oAuth2Client) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                this.authMode = AUTH_MODES.OAUTH;\n                this.oAuth2Client = oAuth2Client;\n\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function useOAuth2Client(_x4) {\n        return _useOAuth2Client.apply(this, arguments);\n      }\n\n      return useOAuth2Client;\n    }() // creds should be an object obtained by loading the json file google gives you\n    // impersonateAs is an email of any user in the G Suite domain\n    // (only works if service account has domain-wide delegation enabled)\n\n  }, {\n    key: \"useServiceAccountAuth\",\n    value: function () {\n      var _useServiceAccountAuth = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(creds) {\n        var impersonateAs,\n            _args5 = arguments;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                impersonateAs = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : null;\n                this.jwtClient = new JWT({\n                  email: creds.client_email,\n                  key: creds.private_key,\n                  scopes: GOOGLE_AUTH_SCOPES,\n                  subject: impersonateAs\n                });\n                _context5.next = 4;\n                return this.renewJwtAuth();\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function useServiceAccountAuth(_x5) {\n        return _useServiceAccountAuth.apply(this, arguments);\n      }\n\n      return useServiceAccountAuth;\n    }()\n  }, {\n    key: \"renewJwtAuth\",\n    value: function () {\n      var _renewJwtAuth = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                this.authMode = AUTH_MODES.JWT;\n                _context6.next = 3;\n                return this.jwtClient.authorize();\n\n              case 3:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function renewJwtAuth() {\n        return _renewJwtAuth.apply(this, arguments);\n      }\n\n      return renewJwtAuth;\n    }() // TODO: provide mechanism to share single JWT auth between docs?\n    // INTERNAL UTILITY FUNCTIONS ////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"_setAxiosRequestAuth\",\n    value: function () {\n      var _setAxiosRequestAuth2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(config) {\n        var credentials;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (!(this.authMode === AUTH_MODES.JWT)) {\n                  _context7.next = 8;\n                  break;\n                }\n\n                if (this.jwtClient) {\n                  _context7.next = 3;\n                  break;\n                }\n\n                throw new Error('JWT auth is not set up properly');\n\n              case 3:\n                _context7.next = 5;\n                return this.jwtClient.authorize();\n\n              case 5:\n                config.headers.Authorization = \"Bearer \".concat(this.jwtClient.credentials.access_token);\n                _context7.next = 29;\n                break;\n\n              case 8:\n                if (!(this.authMode === AUTH_MODES.RAW_ACCESS_TOKEN)) {\n                  _context7.next = 14;\n                  break;\n                }\n\n                if (this.accessToken) {\n                  _context7.next = 11;\n                  break;\n                }\n\n                throw new Error('Invalid access token');\n\n              case 11:\n                config.headers.Authorization = \"Bearer \".concat(this.accessToken);\n                _context7.next = 29;\n                break;\n\n              case 14:\n                if (!(this.authMode === AUTH_MODES.API_KEY)) {\n                  _context7.next = 21;\n                  break;\n                }\n\n                if (this.apiKey) {\n                  _context7.next = 17;\n                  break;\n                }\n\n                throw new Error('Please set API key');\n\n              case 17:\n                config.params = config.params || {};\n                config.params.key = this.apiKey;\n                _context7.next = 29;\n                break;\n\n              case 21:\n                if (!(this.authMode === AUTH_MODES.OAUTH)) {\n                  _context7.next = 28;\n                  break;\n                }\n\n                _context7.next = 24;\n                return this.oAuth2Client.getAccessToken();\n\n              case 24:\n                credentials = _context7.sent;\n                config.headers.Authorization = \"Bearer \".concat(credentials.token);\n                _context7.next = 29;\n                break;\n\n              case 28:\n                throw new Error('You must initialize some kind of auth before making any requests');\n\n              case 29:\n                return _context7.abrupt(\"return\", config);\n\n              case 30:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function _setAxiosRequestAuth(_x6) {\n        return _setAxiosRequestAuth2.apply(this, arguments);\n      }\n\n      return _setAxiosRequestAuth;\n    }()\n  }, {\n    key: \"_handleAxiosResponse\",\n    value: function () {\n      var _handleAxiosResponse2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(response) {\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                return _context8.abrupt(\"return\", response);\n\n              case 1:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }));\n\n      function _handleAxiosResponse(_x7) {\n        return _handleAxiosResponse2.apply(this, arguments);\n      }\n\n      return _handleAxiosResponse;\n    }()\n  }, {\n    key: \"_handleAxiosErrors\",\n    value: function () {\n      var _handleAxiosErrors2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(error) {\n        var _error$response$data$, code, message;\n\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                if (!(error.response && error.response.data)) {\n                  _context9.next = 6;\n                  break;\n                }\n\n                if (error.response.data.error) {\n                  _context9.next = 3;\n                  break;\n                }\n\n                throw error;\n\n              case 3:\n                _error$response$data$ = error.response.data.error, code = _error$response$data$.code, message = _error$response$data$.message;\n                error.message = \"Google API error - [\".concat(code, \"] \").concat(message);\n                throw error;\n\n              case 6:\n                if (!(_.get(error, 'response.status') === 403)) {\n                  _context9.next = 9;\n                  break;\n                }\n\n                if (!(this.authMode === AUTH_MODES.API_KEY)) {\n                  _context9.next = 9;\n                  break;\n                }\n\n                throw new Error('Sheet is private. Use authentication or make public. (see https://github.com/theoephraim/node-google-spreadsheet#a-note-on-authentication for details)');\n\n              case 9:\n                throw error;\n\n              case 10:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function _handleAxiosErrors(_x8) {\n        return _handleAxiosErrors2.apply(this, arguments);\n      }\n\n      return _handleAxiosErrors;\n    }()\n  }, {\n    key: \"_makeSingleUpdateRequest\",\n    value: function () {\n      var _makeSingleUpdateRequest2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(requestType, requestParams) {\n        var _this2 = this;\n\n        var response;\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return this.axios.post(':batchUpdate', {\n                  requests: [_defineProperty({}, requestType, requestParams)],\n                  includeSpreadsheetInResponse: true // responseRanges: [string]\n                  // responseIncludeGridData: true\n\n                });\n\n              case 2:\n                response = _context10.sent;\n\n                this._updateRawProperties(response.data.updatedSpreadsheet.properties);\n\n                _.each(response.data.updatedSpreadsheet.sheets, function (s) {\n                  return _this2._updateOrCreateSheet(s);\n                }); // console.log('API RESPONSE', response.data.replies[0][requestType]);\n\n\n                return _context10.abrupt(\"return\", response.data.replies[0][requestType]);\n\n              case 6:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function _makeSingleUpdateRequest(_x9, _x10) {\n        return _makeSingleUpdateRequest2.apply(this, arguments);\n      }\n\n      return _makeSingleUpdateRequest;\n    }()\n  }, {\n    key: \"_makeBatchUpdateRequest\",\n    value: function () {\n      var _makeBatchUpdateRequest2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(requests, responseRanges) {\n        var _this3 = this;\n\n        var response;\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                _context11.next = 2;\n                return this.axios.post(':batchUpdate', _objectSpread({\n                  requests: requests,\n                  includeSpreadsheetInResponse: true\n                }, responseRanges && _objectSpread({\n                  responseIncludeGridData: true\n                }, responseRanges !== '*' && {\n                  responseRanges: responseRanges\n                })));\n\n              case 2:\n                response = _context11.sent;\n\n                this._updateRawProperties(response.data.updatedSpreadsheet.properties);\n\n                _.each(response.data.updatedSpreadsheet.sheets, function (s) {\n                  return _this3._updateOrCreateSheet(s);\n                });\n\n              case 5:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function _makeBatchUpdateRequest(_x11, _x12) {\n        return _makeBatchUpdateRequest2.apply(this, arguments);\n      }\n\n      return _makeBatchUpdateRequest;\n    }()\n  }, {\n    key: \"_ensureInfoLoaded\",\n    value: function _ensureInfoLoaded() {\n      if (!this._rawProperties) throw new Error('You must call `doc.loadInfo()` before accessing this property');\n    }\n  }, {\n    key: \"_updateRawProperties\",\n    value: function _updateRawProperties(newProperties) {\n      this._rawProperties = newProperties;\n    }\n  }, {\n    key: \"_updateOrCreateSheet\",\n    value: function _updateOrCreateSheet(_ref2) {\n      var properties = _ref2.properties,\n          data = _ref2.data;\n      var sheetId = properties.sheetId;\n\n      if (!this._rawSheets[sheetId]) {\n        this._rawSheets[sheetId] = new GoogleSpreadsheetWorksheet(this, {\n          properties: properties,\n          data: data\n        });\n      } else {\n        this._rawSheets[sheetId]._rawProperties = properties;\n\n        this._rawSheets[sheetId]._fillCellData(data);\n      }\n    } // BASIC PROPS //////////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"_getProp\",\n    value: function _getProp(param) {\n      this._ensureInfoLoaded();\n\n      return this._rawProperties[param];\n    }\n  }, {\n    key: \"_setProp\",\n    value: function _setProp(param, newVal) {\n      // eslint-disable-line no-unused-vars\n      throw new Error('Do not update directly - use `updateProperties()`');\n    }\n  }, {\n    key: \"title\",\n    get: function get() {\n      return this._getProp('title');\n    },\n    set: function set(newVal) {\n      this._setProp('title', newVal);\n    }\n  }, {\n    key: \"locale\",\n    get: function get() {\n      return this._getProp('locale');\n    },\n    set: function set(newVal) {\n      this._setProp('locale', newVal);\n    }\n  }, {\n    key: \"timeZone\",\n    get: function get() {\n      return this._getProp('timeZone');\n    },\n    set: function set(newVal) {\n      this._setProp('timeZone', newVal);\n    }\n  }, {\n    key: \"autoRecalc\",\n    get: function get() {\n      return this._getProp('autoRecalc');\n    },\n    set: function set(newVal) {\n      this._setProp('autoRecalc', newVal);\n    }\n  }, {\n    key: \"defaultFormat\",\n    get: function get() {\n      return this._getProp('defaultFormat');\n    },\n    set: function set(newVal) {\n      this._setProp('defaultFormat', newVal);\n    }\n  }, {\n    key: \"spreadsheetTheme\",\n    get: function get() {\n      return this._getProp('spreadsheetTheme');\n    },\n    set: function set(newVal) {\n      this._setProp('spreadsheetTheme', newVal);\n    }\n  }, {\n    key: \"iterativeCalculationSettings\",\n    get: function get() {\n      return this._getProp('iterativeCalculationSettings');\n    },\n    set: function set(newVal) {\n      this._setProp('iterativeCalculationSettings', newVal);\n    }\n  }, {\n    key: \"updateProperties\",\n    value: function () {\n      var _updateProperties = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(properties) {\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                _context12.next = 2;\n                return this._makeSingleUpdateRequest('updateSpreadsheetProperties', {\n                  properties: properties,\n                  fields: getFieldMask(properties)\n                });\n\n              case 2:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function updateProperties(_x13) {\n        return _updateProperties.apply(this, arguments);\n      }\n\n      return updateProperties;\n    }() // BASIC INFO ////////////////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"loadInfo\",\n    value: function () {\n      var _loadInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(includeCells) {\n        var _this4 = this;\n\n        var response;\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                _context13.next = 2;\n                return this.axios.get('/', {\n                  params: _objectSpread({}, includeCells && {\n                    includeGridData: true\n                  })\n                });\n\n              case 2:\n                response = _context13.sent;\n                this._rawProperties = response.data.properties;\n\n                _.each(response.data.sheets, function (s) {\n                  return _this4._updateOrCreateSheet(s);\n                });\n\n              case 5:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function loadInfo(_x14) {\n        return _loadInfo.apply(this, arguments);\n      }\n\n      return loadInfo;\n    }()\n  }, {\n    key: \"getInfo\",\n    value: function () {\n      var _getInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14() {\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                return _context14.abrupt(\"return\", this.loadInfo());\n\n              case 1:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      function getInfo() {\n        return _getInfo.apply(this, arguments);\n      }\n\n      return getInfo;\n    }() // alias to mimic old version\n\n  }, {\n    key: \"resetLocalCache\",\n    value: function resetLocalCache() {\n      this._rawProperties = null;\n      this._rawSheets = {};\n    } // WORKSHEETS ////////////////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"sheetCount\",\n    get: function get() {\n      this._ensureInfoLoaded();\n\n      return _.values(this._rawSheets).length;\n    }\n  }, {\n    key: \"sheetsById\",\n    get: function get() {\n      this._ensureInfoLoaded();\n\n      return this._rawSheets;\n    }\n  }, {\n    key: \"sheetsByIndex\",\n    get: function get() {\n      this._ensureInfoLoaded();\n\n      return _.sortBy(this._rawSheets, 'index');\n    }\n  }, {\n    key: \"sheetsByTitle\",\n    get: function get() {\n      this._ensureInfoLoaded();\n\n      return _.keyBy(this._rawSheets, 'title');\n    }\n  }, {\n    key: \"addSheet\",\n    value: function () {\n      var _addSheet = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15() {\n        var properties,\n            response,\n            newSheetId,\n            newSheet,\n            _args15 = arguments;\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                properties = _args15.length > 0 && _args15[0] !== undefined ? _args15[0] : {};\n                _context15.next = 3;\n                return this._makeSingleUpdateRequest('addSheet', {\n                  properties: _.omit(properties, 'headers', 'headerValues')\n                });\n\n              case 3:\n                response = _context15.sent;\n                // _makeSingleUpdateRequest already adds the sheet\n                newSheetId = response.properties.sheetId;\n                newSheet = this.sheetsById[newSheetId]; // allow it to work with `.headers` but `.headerValues` is the real prop\n\n                if (!(properties.headerValues || properties.headers)) {\n                  _context15.next = 9;\n                  break;\n                }\n\n                _context15.next = 9;\n                return newSheet.setHeaderRow(properties.headerValues || properties.headers);\n\n              case 9:\n                return _context15.abrupt(\"return\", newSheet);\n\n              case 10:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function addSheet() {\n        return _addSheet.apply(this, arguments);\n      }\n\n      return addSheet;\n    }()\n  }, {\n    key: \"addWorksheet\",\n    value: function () {\n      var _addWorksheet = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(properties) {\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                return _context16.abrupt(\"return\", this.addSheet(properties));\n\n              case 1:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      function addWorksheet(_x15) {\n        return _addWorksheet.apply(this, arguments);\n      }\n\n      return addWorksheet;\n    }() // alias to mimic old version\n\n  }, {\n    key: \"deleteSheet\",\n    value: function () {\n      var _deleteSheet = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(sheetId) {\n        return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                _context17.next = 2;\n                return this._makeSingleUpdateRequest('deleteSheet', {\n                  sheetId: sheetId\n                });\n\n              case 2:\n                delete this._rawSheets[sheetId];\n\n              case 3:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      function deleteSheet(_x16) {\n        return _deleteSheet.apply(this, arguments);\n      }\n\n      return deleteSheet;\n    }() // NAMED RANGES //////////////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"addNamedRange\",\n    value: function () {\n      var _addNamedRange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(name, range, namedRangeId) {\n        return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                return _context18.abrupt(\"return\", this._makeSingleUpdateRequest('addNamedRange', {\n                  name: name,\n                  range: range,\n                  namedRangeId: namedRangeId\n                }));\n\n              case 1:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n\n      function addNamedRange(_x17, _x18, _x19) {\n        return _addNamedRange.apply(this, arguments);\n      }\n\n      return addNamedRange;\n    }()\n  }, {\n    key: \"deleteNamedRange\",\n    value: function () {\n      var _deleteNamedRange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19(namedRangeId) {\n        return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                return _context19.abrupt(\"return\", this._makeSingleUpdateRequest('deleteNamedRange', {\n                  namedRangeId: namedRangeId\n                }));\n\n              case 1:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n\n      function deleteNamedRange(_x20) {\n        return _deleteNamedRange.apply(this, arguments);\n      }\n\n      return deleteNamedRange;\n    }() // LOADING CELLS /////////////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"loadCells\",\n    value: function () {\n      var _loadCells = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20(filters) {\n        var _this5 = this;\n\n        var readOnlyMode, filtersArray, dataFilters, result, sheets;\n        return _regeneratorRuntime.wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                // you can pass in a single filter or an array of filters\n                // strings are treated as a1 ranges\n                // objects are treated as GridRange objects\n                // TODO: make it support DeveloperMetadataLookup objects\n                // TODO: switch to this mode if using a read-only auth token?\n                readOnlyMode = this.authMode === AUTH_MODES.API_KEY;\n                filtersArray = _.isArray(filters) ? filters : [filters];\n                dataFilters = _.map(filtersArray, function (filter) {\n                  if (_.isString(filter)) {\n                    return readOnlyMode ? filter : {\n                      a1Range: filter\n                    };\n                  }\n\n                  if (_.isObject(filter)) {\n                    if (readOnlyMode) {\n                      throw new Error('Only A1 ranges are supported when fetching cells with read-only access (using only an API key)');\n                    } // TODO: make this support Developer Metadata filters\n\n\n                    return {\n                      gridRange: filter\n                    };\n                  }\n\n                  throw new Error('Each filter must be an A1 range string or a gridrange object');\n                });\n\n                if (!(this.authMode === AUTH_MODES.API_KEY)) {\n                  _context20.next = 9;\n                  break;\n                }\n\n                _context20.next = 6;\n                return this.axios.get('/', {\n                  params: {\n                    includeGridData: true,\n                    ranges: dataFilters\n                  }\n                });\n\n              case 6:\n                result = _context20.sent;\n                _context20.next = 12;\n                break;\n\n              case 9:\n                _context20.next = 11;\n                return this.axios.post(':getByDataFilter', {\n                  includeGridData: true,\n                  dataFilters: dataFilters\n                });\n\n              case 11:\n                result = _context20.sent;\n\n              case 12:\n                sheets = result.data.sheets;\n\n                _.each(sheets, function (sheet) {\n                  _this5._updateOrCreateSheet(sheet);\n                });\n\n              case 14:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this);\n      }));\n\n      function loadCells(_x21) {\n        return _loadCells.apply(this, arguments);\n      }\n\n      return loadCells;\n    }()\n  }]);\n\n  return GoogleSpreadsheet;\n}();\n\nmodule.exports = GoogleSpreadsheet;","map":null,"metadata":{},"sourceType":"script"}