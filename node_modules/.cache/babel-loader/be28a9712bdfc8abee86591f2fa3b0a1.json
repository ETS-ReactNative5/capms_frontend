{"ast":null,"code":"var _toConsumableArray = require(\"C:\\\\Users\\\\suresoft\\\\Desktop\\\\vomproject\\\\sure-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\suresoft\\\\Desktop\\\\vomproject\\\\sure-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _objectSpread = require(\"C:\\\\Users\\\\suresoft\\\\Desktop\\\\vomproject\\\\sure-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\suresoft\\\\Desktop\\\\vomproject\\\\sure-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\suresoft\\\\Desktop\\\\vomproject\\\\sure-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\suresoft\\\\Desktop\\\\vomproject\\\\sure-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _ = require('lodash');\n\nvar GoogleSpreadsheetRow = require('./GoogleSpreadsheetRow');\n\nvar GoogleSpreadsheetCell = require('./GoogleSpreadsheetCell');\n\nvar _require = require('./utils'),\n    getFieldMask = _require.getFieldMask,\n    columnToLetter = _require.columnToLetter,\n    letterToColumn = _require.letterToColumn;\n\nfunction checkForDuplicateHeaders(headers) {\n  // check for duplicate headers\n  var checkForDupes = _.groupBy(headers); // { c1: ['c1'], c2: ['c2', 'c2' ]}\n\n\n  _.each(checkForDupes, function (grouped, header) {\n    if (!header) return; // empty columns are skipped, so multiple is ok\n\n    if (grouped.length > 1) {\n      throw new Error(\"Duplicate header detected: \\\"\".concat(header, \"\\\". Please make sure all non-empty headers are unique\"));\n    }\n  });\n}\n\nvar GoogleSpreadsheetWorksheet = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function GoogleSpreadsheetWorksheet(parentSpreadsheet, _ref) {\n    var properties = _ref.properties,\n        data = _ref.data;\n\n    _classCallCheck(this, GoogleSpreadsheetWorksheet);\n\n    this._spreadsheet = parentSpreadsheet; // the parent GoogleSpreadsheet instance\n    // basic properties\n\n    this._rawProperties = properties;\n    this._cells = []; // we will use a 2d sparse array to store cells;\n\n    this._rowMetadata = []; // 1d sparse array\n\n    this._columnMetadata = [];\n    if (data) this._fillCellData(data);\n    return this;\n  } // INTERNAL UTILITY FUNCTIONS ////////////////////////////////////////////////////////////////////\n\n\n  _createClass(GoogleSpreadsheetWorksheet, [{\n    key: \"_makeSingleUpdateRequest\",\n    value: function () {\n      var _makeSingleUpdateRequest2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(requestType, requestParams) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", this._spreadsheet._makeSingleUpdateRequest(requestType, _objectSpread({}, requestParams)));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function _makeSingleUpdateRequest(_x, _x2) {\n        return _makeSingleUpdateRequest2.apply(this, arguments);\n      }\n\n      return _makeSingleUpdateRequest;\n    }()\n  }, {\n    key: \"_ensureInfoLoaded\",\n    value: function _ensureInfoLoaded() {\n      if (!this._rawProperties) {\n        throw new Error('You must call `doc.loadInfo()` again before accessing this property');\n      }\n    }\n  }, {\n    key: \"resetLocalCache\",\n    value: function resetLocalCache(dataOnly) {\n      if (!dataOnly) this._rawProperties = null;\n      this.headerValues = null;\n      this._cells = [];\n    }\n  }, {\n    key: \"_fillCellData\",\n    value: function _fillCellData(dataRanges) {\n      var _this = this;\n\n      _.each(dataRanges, function (range) {\n        var startRow = range.startRow || 0;\n        var startColumn = range.startColumn || 0;\n        var numRows = range.rowMetadata.length;\n        var numColumns = range.columnMetadata.length; // update cell data for entire range\n\n        for (var i = 0; i < numRows; i++) {\n          var actualRow = startRow + i;\n\n          for (var j = 0; j < numColumns; j++) {\n            var actualColumn = startColumn + j; // if the row has not been initialized yet, do it\n\n            if (!_this._cells[actualRow]) _this._cells[actualRow] = []; // see if the response includes some info for the cell\n\n            var cellData = _.get(range, \"rowData[\".concat(i, \"].values[\").concat(j, \"]\")); // update the cell object or create it\n\n\n            if (_this._cells[actualRow][actualColumn]) {\n              _this._cells[actualRow][actualColumn]._updateRawData(cellData);\n            } else {\n              _this._cells[actualRow][actualColumn] = new GoogleSpreadsheetCell(_this, actualRow, actualColumn, cellData);\n            }\n          }\n        } // update row metadata\n\n\n        for (var _i = 0; _i < range.rowMetadata.length; _i++) {\n          _this._rowMetadata[startRow + _i] = range.rowMetadata[_i];\n        } // update column metadata\n\n\n        for (var _i2 = 0; _i2 < range.columnMetadata.length; _i2++) {\n          _this._columnMetadata[startColumn + _i2] = range.columnMetadata[_i2];\n        }\n      });\n    } // PROPERTY GETTERS //////////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"_getProp\",\n    value: function _getProp(param) {\n      this._ensureInfoLoaded();\n\n      return this._rawProperties[param];\n    }\n  }, {\n    key: \"_setProp\",\n    value: function _setProp(param, newVal) {\n      // eslint-disable-line no-unused-vars\n      throw new Error('Do not update directly - use `updateProperties()`');\n    }\n  }, {\n    key: \"sheetId\",\n    get: function get() {\n      return this._getProp('sheetId');\n    },\n    set: function set(newVal) {\n      return this._setProp('sheetId', newVal);\n    }\n  }, {\n    key: \"title\",\n    get: function get() {\n      return this._getProp('title');\n    },\n    set: function set(newVal) {\n      return this._setProp('title', newVal);\n    }\n  }, {\n    key: \"index\",\n    get: function get() {\n      return this._getProp('index');\n    },\n    set: function set(newVal) {\n      return this._setProp('index', newVal);\n    }\n  }, {\n    key: \"sheetType\",\n    get: function get() {\n      return this._getProp('sheetType');\n    },\n    set: function set(newVal) {\n      return this._setProp('sheetType', newVal);\n    }\n  }, {\n    key: \"gridProperties\",\n    get: function get() {\n      return this._getProp('gridProperties');\n    },\n    set: function set(newVal) {\n      return this._setProp('gridProperties', newVal);\n    }\n  }, {\n    key: \"hidden\",\n    get: function get() {\n      return this._getProp('hidden');\n    },\n    set: function set(newVal) {\n      return this._setProp('hidden', newVal);\n    }\n  }, {\n    key: \"tabColor\",\n    get: function get() {\n      return this._getProp('tabColor');\n    },\n    set: function set(newVal) {\n      return this._setProp('tabColor', newVal);\n    }\n  }, {\n    key: \"rightToLeft\",\n    get: function get() {\n      return this._getProp('rightToLeft');\n    },\n    set: function set(newVal) {\n      return this._setProp('rightToLeft', newVal);\n    }\n  }, {\n    key: \"rowCount\",\n    get: function get() {\n      this._ensureInfoLoaded();\n\n      return this.gridProperties.rowCount;\n    },\n    set: function set(newVal) {\n      throw new Error('Do not update directly. Use resize()');\n    }\n  }, {\n    key: \"columnCount\",\n    get: function get() {\n      this._ensureInfoLoaded();\n\n      return this.gridProperties.columnCount;\n    },\n    set: function set(newVal) {\n      throw new Error('Do not update directly. Use resize()');\n    }\n  }, {\n    key: \"colCount\",\n    get: function get() {\n      throw new Error('`colCount` is deprecated - please use `columnCount` instead.');\n    }\n  }, {\n    key: \"a1SheetName\",\n    get: function get() {\n      return \"'\".concat(this.title.replace(/'/g, \"''\"), \"'\");\n    }\n  }, {\n    key: \"encodedA1SheetName\",\n    get: function get() {\n      return encodeURIComponent(this.a1SheetName);\n    }\n  }, {\n    key: \"lastColumnLetter\",\n    get: function get() {\n      return columnToLetter(this.columnCount);\n    } // CELLS-BASED INTERACTIONS //////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"cellStats\",\n    get: function get() {\n      var allCells = _.flatten(this._cells);\n\n      allCells = _.compact(allCells);\n      return {\n        nonEmpty: _.filter(allCells, function (c) {\n          return c.value;\n        }).length,\n        loaded: allCells.length,\n        total: this.rowCount * this.columnCount\n      };\n    }\n  }, {\n    key: \"getCellByA1\",\n    value: function getCellByA1(a1Address) {\n      var split = a1Address.match(/([A-Z]+)([0-9]+)/);\n      var columnIndex = letterToColumn(split[1]);\n      var rowIndex = parseInt(split[2]);\n      return this.getCell(rowIndex - 1, columnIndex - 1);\n    }\n  }, {\n    key: \"getCell\",\n    value: function getCell(rowIndex, columnIndex) {\n      if (rowIndex < 0 || columnIndex < 0) throw new Error('Min coordinate is 0, 0');\n\n      if (rowIndex >= this.rowCount || columnIndex >= this.columnCount) {\n        throw new Error(\"Out of bounds, sheet is \".concat(this.rowCount, \" by \").concat(this.columnCount));\n      }\n\n      if (!_.get(this._cells, \"[\".concat(rowIndex, \"][\").concat(columnIndex, \"]\"))) {\n        throw new Error('This cell has not been loaded yet');\n      }\n\n      return this._cells[rowIndex][columnIndex];\n    }\n  }, {\n    key: \"loadCells\",\n    value: function () {\n      var _loadCells = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(sheetFilters) {\n        var _this2 = this;\n\n        var filtersArray;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (sheetFilters) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", this._spreadsheet.loadCells(this.a1SheetName));\n\n              case 2:\n                filtersArray = _.isArray(sheetFilters) ? sheetFilters : [sheetFilters];\n                filtersArray = _.map(filtersArray, function (filter) {\n                  // add sheet name to A1 ranges\n                  if (_.isString(filter)) {\n                    if (filter.startsWith(_this2.a1SheetName)) return filter;\n                    return \"\".concat(_this2.a1SheetName, \"!\").concat(filter);\n                  }\n\n                  if (_.isObject(filter)) {\n                    // TODO: detect and support DeveloperMetadata filters\n                    if (!filter.sheetId) {\n                      return _objectSpread({\n                        sheetId: _this2.sheetId\n                      }, filter);\n                    }\n\n                    if (filter.sheetId !== _this2.sheetId) {\n                      throw new Error('Leave sheet ID blank or set to matching ID of this sheet');\n                    } else {\n                      return filter;\n                    }\n                  } else {\n                    throw new Error('Each filter must be a A1 range string or gridrange object');\n                  }\n                });\n                return _context2.abrupt(\"return\", this._spreadsheet.loadCells(filtersArray));\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function loadCells(_x3) {\n        return _loadCells.apply(this, arguments);\n      }\n\n      return loadCells;\n    }()\n  }, {\n    key: \"saveUpdatedCells\",\n    value: function () {\n      var _saveUpdatedCells = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var cellsToSave;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                cellsToSave = _.filter(_.flatten(this._cells), {\n                  _isDirty: true\n                });\n\n                if (!cellsToSave.length) {\n                  _context3.next = 4;\n                  break;\n                }\n\n                _context3.next = 4;\n                return this.saveCells(cellsToSave);\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function saveUpdatedCells() {\n        return _saveUpdatedCells.apply(this, arguments);\n      }\n\n      return saveUpdatedCells;\n    }()\n  }, {\n    key: \"saveCells\",\n    value: function () {\n      var _saveCells = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(cellsToUpdate) {\n        var _this3 = this;\n\n        var requests, responseRanges;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                // we send an individual \"updateCells\" request for each cell\n                // because the fields that are udpated for each group are the same\n                // and we dont want to accidentally overwrite something\n                requests = _.map(cellsToUpdate, function (cell) {\n                  return cell._getUpdateRequest();\n                });\n                responseRanges = _.map(cellsToUpdate, function (c) {\n                  return \"\".concat(_this3.a1SheetName, \"!\").concat(c.a1Address);\n                }); // if nothing is being updated the request returned is just `null`\n                // so we make sure at least 1 request is valid - otherwise google throws a 400\n\n                if (_.compact(requests).length) {\n                  _context4.next = 4;\n                  break;\n                }\n\n                throw new Error('At least one cell must have something to update');\n\n              case 4:\n                _context4.next = 6;\n                return this._spreadsheet._makeBatchUpdateRequest(requests, responseRanges);\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function saveCells(_x4) {\n        return _saveCells.apply(this, arguments);\n      }\n\n      return saveCells;\n    }() // SAVING THIS FOR FUTURE USE\n    // puts the cells that need updating into batches\n    // async updateCellsByBatches() {\n    //   // saving this code, but it's problematic because each group must have the same update fields\n    //   const cellsByRow = _.groupBy(cellsToUpdate, 'rowIndex');\n    //   const groupsToSave = [];\n    //   _.each(cellsByRow, (cells, rowIndex) => {\n    //     let cellGroup = [];\n    //     _.each(cells, (c) => {\n    //       if (!cellGroup.length) {\n    //         cellGroup.push(c);\n    //       } else if (\n    //         cellGroup[cellGroup.length - 1].columnIndex ===\n    //         c.columnIndex - 1\n    //       ) {\n    //         cellGroup.push(c);\n    //       } else {\n    //         groupsToSave.push(cellGroup);\n    //         cellGroup = [];\n    //       }\n    //     });\n    //     groupsToSave.push(cellGroup);\n    //   });\n    //   const requests = _.map(groupsToSave, (cellGroup) => ({\n    //     updateCells: {\n    //       rows: [\n    //         {\n    //           values: _.map(cellGroup, (cell) => ({\n    //             ...cell._draftData.value && {\n    //               userEnteredValue: { [cell._draftData.valueType]: cell._draftData.value },\n    //             },\n    //             ...cell._draftData.note !== undefined && {\n    //               note: cell._draftData.note ,\n    //             },\n    //             ...cell._draftData.userEnteredFormat && {\n    //               userEnteredValue: cell._draftData.userEnteredFormat,\n    //             },\n    //           })),\n    //         },\n    //       ],\n    //       fields: 'userEnteredValue,note,userEnteredFormat',\n    //       start: {\n    //         sheetId: this.sheetId,\n    //         rowIndex: cellGroup[0].rowIndex,\n    //         columnIndex: cellGroup[0].columnIndex,\n    //       },\n    //     },\n    //   }));\n    //   const responseRanges = _.map(groupsToSave, (cellGroup) => {\n    //     let a1Range = cellGroup[0].a1Address;\n    //     if (cellGroup.length > 1)\n    //       a1Range += `:${cellGroup[cellGroup.length - 1].a1Address}`;\n    //     return `${cellGroup[0]._sheet.a1SheetName}!${a1Range}`;\n    //   });\n    // }\n    // ROW BASED FUNCTIONS ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"loadHeaderRow\",\n    value: function () {\n      var _loadHeaderRow = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var rows;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.getCellsInRange(\"A1:\".concat(this.lastColumnLetter, \"1\"));\n\n              case 2:\n                rows = _context5.sent;\n\n                if (rows) {\n                  _context5.next = 5;\n                  break;\n                }\n\n                throw new Error('No values in the header row - fill the first row with header values before trying to interact with rows');\n\n              case 5:\n                this.headerValues = _.map(rows[0], function (header) {\n                  return header.trim();\n                });\n\n                if (_.compact(this.headerValues).length) {\n                  _context5.next = 8;\n                  break;\n                }\n\n                throw new Error('All your header cells are blank - fill the first row with header values before trying to interact with rows');\n\n              case 8:\n                checkForDuplicateHeaders(this.headerValues);\n\n              case 9:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function loadHeaderRow() {\n        return _loadHeaderRow.apply(this, arguments);\n      }\n\n      return loadHeaderRow;\n    }()\n  }, {\n    key: \"setHeaderRow\",\n    value: function () {\n      var _setHeaderRow = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(headerValues) {\n        var trimmedHeaderValues, response;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                if (headerValues) {\n                  _context6.next = 2;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\");\n\n              case 2:\n                if (!(headerValues.length > this.columnCount)) {\n                  _context6.next = 4;\n                  break;\n                }\n\n                throw new Error(\"Sheet is not large enough to fit \".concat(headerValues.length, \" columns. Resize the sheet first.\"));\n\n              case 4:\n                trimmedHeaderValues = _.map(headerValues, function (h) {\n                  return h.trim();\n                });\n                checkForDuplicateHeaders(trimmedHeaderValues);\n\n                if (_.compact(trimmedHeaderValues).length) {\n                  _context6.next = 8;\n                  break;\n                }\n\n                throw new Error('All your header cells are blank -');\n\n              case 8:\n                _context6.next = 10;\n                return this._spreadsheet.axios.request({\n                  method: 'put',\n                  url: \"/values/\".concat(this.encodedA1SheetName, \"!1:1\"),\n                  params: {\n                    valueInputOption: 'USER_ENTERED',\n                    // other option is RAW\n                    includeValuesInResponse: true\n                  },\n                  data: {\n                    range: \"\".concat(this.a1SheetName, \"!1:1\"),\n                    majorDimension: 'ROWS',\n                    values: [[].concat(_toConsumableArray(trimmedHeaderValues), _toConsumableArray(_.times(this.columnCount - trimmedHeaderValues.length, function () {\n                      return '';\n                    })))]\n                  }\n                });\n\n              case 10:\n                response = _context6.sent;\n                this.headerValues = response.data.updatedData.values[0];\n\n              case 12:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function setHeaderRow(_x5) {\n        return _setHeaderRow.apply(this, arguments);\n      }\n\n      return setHeaderRow;\n    }()\n  }, {\n    key: \"addRows\",\n    value: function () {\n      var _addRows = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(rows) {\n        var _this4 = this;\n\n        var options,\n            rowsAsArrays,\n            response,\n            updatedRange,\n            rowNumber,\n            _args7 = arguments;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                options = _args7.length > 1 && _args7[1] !== undefined ? _args7[1] : {};\n\n                if (!this.title.includes(':')) {\n                  _context7.next = 3;\n                  break;\n                }\n\n                throw new Error('Please remove the \":\" from your sheet title. There is a bug with the google API which breaks appending rows if any colons are in the sheet title.');\n\n              case 3:\n                if (_.isArray(rows)) {\n                  _context7.next = 5;\n                  break;\n                }\n\n                throw new Error('You must pass in an array of row values to append');\n\n              case 5:\n                if (this.headerValues) {\n                  _context7.next = 8;\n                  break;\n                }\n\n                _context7.next = 8;\n                return this.loadHeaderRow();\n\n              case 8:\n                // convert each row into an array of cell values rather than the key/value object\n                rowsAsArrays = [];\n\n                _.each(rows, function (row) {\n                  var rowAsArray;\n\n                  if (_.isArray(row)) {\n                    rowAsArray = row;\n                  } else if (_.isObject(row)) {\n                    rowAsArray = [];\n\n                    for (var i = 0; i < _this4.headerValues.length; i++) {\n                      var propName = _this4.headerValues[i];\n                      rowAsArray[i] = row[propName];\n                    }\n                  } else {\n                    throw new Error('Each row must be an object or an array');\n                  }\n\n                  rowsAsArrays.push(rowAsArray);\n                });\n\n                _context7.next = 12;\n                return this._spreadsheet.axios.request({\n                  method: 'post',\n                  url: \"/values/\".concat(this.encodedA1SheetName, \"!A1:append\"),\n                  params: {\n                    valueInputOption: options.raw ? 'RAW' : 'USER_ENTERED',\n                    insertDataOption: options.insert ? 'INSERT_ROWS' : 'OVERWRITE',\n                    includeValuesInResponse: true\n                  },\n                  data: {\n                    values: rowsAsArrays\n                  }\n                });\n\n              case 12:\n                response = _context7.sent;\n                // extract the new row number from the A1-notation data range in the response\n                // ex: in \"'Sheet8!A2:C2\" -- we want the `2`\n                updatedRange = response.data.updates.updatedRange;\n                rowNumber = updatedRange.match(/![A-Z]+([0-9]+):?/)[1];\n                rowNumber = parseInt(rowNumber); // if new rows were added, we need update sheet.rowRount\n\n                if (options.insert) {\n                  this._rawProperties.gridProperties.rowCount += rows.length;\n                } else if (rowNumber + rows.length > this.rowCount) {\n                  // have to subtract 1 since one row was inserted at rowNumber\n                  this._rawProperties.gridProperties.rowCount = rowNumber + rows.length - 1;\n                }\n\n                return _context7.abrupt(\"return\", _.map(response.data.updates.updatedData.values, function (rowValues) {\n                  var row = new GoogleSpreadsheetRow(_this4, rowNumber++, rowValues);\n                  return row;\n                }));\n\n              case 18:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function addRows(_x6) {\n        return _addRows.apply(this, arguments);\n      }\n\n      return addRows;\n    }()\n  }, {\n    key: \"addRow\",\n    value: function () {\n      var _addRow = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(rowValues, options) {\n        var rows;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return this.addRows([rowValues], options);\n\n              case 2:\n                rows = _context8.sent;\n                return _context8.abrupt(\"return\", rows[0]);\n\n              case 4:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function addRow(_x7, _x8) {\n        return _addRow.apply(this, arguments);\n      }\n\n      return addRow;\n    }()\n  }, {\n    key: \"getRows\",\n    value: function () {\n      var _getRows = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n        var options,\n            firstRow,\n            lastRow,\n            lastColumn,\n            rawRows,\n            rows,\n            rowNum,\n            i,\n            _args9 = arguments;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                options = _args9.length > 0 && _args9[0] !== undefined ? _args9[0] : {};\n                // https://developers.google.com/sheets/api/guides/migration\n                // v4 API does not have equivalents for the row-order query parameters provided\n                // Reverse-order is trivial; simply process the returned values array in reverse order.\n                // Order by column is not supported for reads, but it is possible to sort the data then read\n                // v4 API does not currently have a direct equivalent for the Sheets API v3 structured queries\n                // However, you can retrieve the relevant data and sort through it as needed in your application\n                // options\n                // - offset\n                // - limit\n                options.offset = options.offset || 0;\n                options.limit = options.limit || this.rowCount - 1;\n\n                if (this.headerValues) {\n                  _context9.next = 6;\n                  break;\n                }\n\n                _context9.next = 6;\n                return this.loadHeaderRow();\n\n              case 6:\n                firstRow = 2 + options.offset; // skip first row AND not zero indexed\n\n                lastRow = firstRow + options.limit - 1; // inclusive so we subtract 1\n\n                lastColumn = columnToLetter(this.headerValues.length);\n                _context9.next = 11;\n                return this.getCellsInRange(\"A\".concat(firstRow, \":\").concat(lastColumn).concat(lastRow));\n\n              case 11:\n                rawRows = _context9.sent;\n\n                if (rawRows) {\n                  _context9.next = 14;\n                  break;\n                }\n\n                return _context9.abrupt(\"return\", []);\n\n              case 14:\n                rows = [];\n                rowNum = firstRow;\n\n                for (i = 0; i < rawRows.length; i++) {\n                  rows.push(new GoogleSpreadsheetRow(this, rowNum++, rawRows[i]));\n                }\n\n                return _context9.abrupt(\"return\", rows);\n\n              case 18:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function getRows() {\n        return _getRows.apply(this, arguments);\n      }\n\n      return getRows;\n    }() // BASIC PROPS ///////////////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"updateProperties\",\n    value: function () {\n      var _updateProperties = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(properties) {\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                return _context10.abrupt(\"return\", this._makeSingleUpdateRequest('updateSheetProperties', {\n                  properties: _objectSpread({\n                    sheetId: this.sheetId\n                  }, properties),\n                  fields: getFieldMask(properties)\n                }));\n\n              case 1:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function updateProperties(_x9) {\n        return _updateProperties.apply(this, arguments);\n      }\n\n      return updateProperties;\n    }()\n  }, {\n    key: \"updateGridProperties\",\n    value: function () {\n      var _updateGridProperties = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(gridProperties) {\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                return _context11.abrupt(\"return\", this.updateProperties({\n                  gridProperties: gridProperties\n                }));\n\n              case 1:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function updateGridProperties(_x10) {\n        return _updateGridProperties.apply(this, arguments);\n      }\n\n      return updateGridProperties;\n    }() // just a shortcut because resize makes more sense to change rowCount / columnCount\n\n  }, {\n    key: \"resize\",\n    value: function () {\n      var _resize = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(gridProperties) {\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                return _context12.abrupt(\"return\", this.updateGridProperties(gridProperties));\n\n              case 1:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function resize(_x11) {\n        return _resize.apply(this, arguments);\n      }\n\n      return resize;\n    }()\n  }, {\n    key: \"updateDimensionProperties\",\n    value: function () {\n      var _updateDimensionProperties = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(columnsOrRows, properties, bounds) {\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                return _context13.abrupt(\"return\", this._makeSingleUpdateRequest('updateDimensionProperties', {\n                  range: _objectSpread({\n                    sheetId: this.sheetId,\n                    dimension: columnsOrRows\n                  }, bounds && {\n                    startIndex: bounds.startIndex,\n                    endIndex: bounds.endIndex\n                  }),\n                  properties: properties,\n                  fields: getFieldMask(properties)\n                }));\n\n              case 1:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function updateDimensionProperties(_x12, _x13, _x14) {\n        return _updateDimensionProperties.apply(this, arguments);\n      }\n\n      return updateDimensionProperties;\n    }() // OTHER /////////////////////////////////////////////////////////////////////////////////////////\n    // this uses the \"values\" getter and does not give all the info about the cell contents\n    // it is used internally when loading header cells\n\n  }, {\n    key: \"getCellsInRange\",\n    value: function () {\n      var _getCellsInRange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(a1Range, options) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                _context14.next = 2;\n                return this._spreadsheet.axios.get(\"/values/\".concat(this.encodedA1SheetName, \"!\").concat(a1Range), {\n                  params: options\n                });\n\n              case 2:\n                response = _context14.sent;\n                return _context14.abrupt(\"return\", response.data.values);\n\n              case 4:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      function getCellsInRange(_x15, _x16) {\n        return _getCellsInRange.apply(this, arguments);\n      }\n\n      return getCellsInRange;\n    }()\n  }, {\n    key: \"updateNamedRange\",\n    value: function () {\n      var _updateNamedRange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15() {\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15);\n      }));\n\n      function updateNamedRange() {\n        return _updateNamedRange.apply(this, arguments);\n      }\n\n      return updateNamedRange;\n    }()\n  }, {\n    key: \"addNamedRange\",\n    value: function () {\n      var _addNamedRange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16() {\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16);\n      }));\n\n      function addNamedRange() {\n        return _addNamedRange.apply(this, arguments);\n      }\n\n      return addNamedRange;\n    }()\n  }, {\n    key: \"deleteNamedRange\",\n    value: function () {\n      var _deleteNamedRange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17() {\n        return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17);\n      }));\n\n      function deleteNamedRange() {\n        return _deleteNamedRange.apply(this, arguments);\n      }\n\n      return deleteNamedRange;\n    }()\n  }, {\n    key: \"repeatCell\",\n    value: function () {\n      var _repeatCell = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18() {\n        return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18);\n      }));\n\n      function repeatCell() {\n        return _repeatCell.apply(this, arguments);\n      }\n\n      return repeatCell;\n    }()\n  }, {\n    key: \"autoFill\",\n    value: function () {\n      var _autoFill = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19() {\n        return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19);\n      }));\n\n      function autoFill() {\n        return _autoFill.apply(this, arguments);\n      }\n\n      return autoFill;\n    }()\n  }, {\n    key: \"cutPaste\",\n    value: function () {\n      var _cutPaste = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20() {\n        return _regeneratorRuntime.wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20);\n      }));\n\n      function cutPaste() {\n        return _cutPaste.apply(this, arguments);\n      }\n\n      return cutPaste;\n    }()\n  }, {\n    key: \"copyPaste\",\n    value: function () {\n      var _copyPaste = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee21() {\n        return _regeneratorRuntime.wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21);\n      }));\n\n      function copyPaste() {\n        return _copyPaste.apply(this, arguments);\n      }\n\n      return copyPaste;\n    }()\n  }, {\n    key: \"mergeCells\",\n    value: function () {\n      var _mergeCells = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee22(range) {\n        var mergeType,\n            _args22 = arguments;\n        return _regeneratorRuntime.wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                mergeType = _args22.length > 1 && _args22[1] !== undefined ? _args22[1] : 'MERGE_ALL';\n\n                if (!(range.sheetId && range.sheetId !== this.sheetId)) {\n                  _context22.next = 3;\n                  break;\n                }\n\n                throw new Error('Leave sheet ID blank or set to matching ID of this sheet');\n\n              case 3:\n                _context22.next = 5;\n                return this._makeSingleUpdateRequest('mergeCells', {\n                  mergeType: mergeType,\n                  range: _objectSpread(_objectSpread({}, range), {}, {\n                    sheetId: this.sheetId\n                  })\n                });\n\n              case 5:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee22, this);\n      }));\n\n      function mergeCells(_x17) {\n        return _mergeCells.apply(this, arguments);\n      }\n\n      return mergeCells;\n    }()\n  }, {\n    key: \"unmergeCells\",\n    value: function () {\n      var _unmergeCells = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee23(range) {\n        return _regeneratorRuntime.wrap(function _callee23$(_context23) {\n          while (1) {\n            switch (_context23.prev = _context23.next) {\n              case 0:\n                if (!(range.sheetId && range.sheetId !== this.sheetId)) {\n                  _context23.next = 2;\n                  break;\n                }\n\n                throw new Error('Leave sheet ID blank or set to matching ID of this sheet');\n\n              case 2:\n                _context23.next = 4;\n                return this._makeSingleUpdateRequest('unmergeCells', {\n                  range: _objectSpread(_objectSpread({}, range), {}, {\n                    sheetId: this.sheetId\n                  })\n                });\n\n              case 4:\n              case \"end\":\n                return _context23.stop();\n            }\n          }\n        }, _callee23, this);\n      }));\n\n      function unmergeCells(_x18) {\n        return _unmergeCells.apply(this, arguments);\n      }\n\n      return unmergeCells;\n    }()\n  }, {\n    key: \"updateBorders\",\n    value: function () {\n      var _updateBorders = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee24() {\n        return _regeneratorRuntime.wrap(function _callee24$(_context24) {\n          while (1) {\n            switch (_context24.prev = _context24.next) {\n              case 0:\n              case \"end\":\n                return _context24.stop();\n            }\n          }\n        }, _callee24);\n      }));\n\n      function updateBorders() {\n        return _updateBorders.apply(this, arguments);\n      }\n\n      return updateBorders;\n    }()\n  }, {\n    key: \"addFilterView\",\n    value: function () {\n      var _addFilterView = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee25() {\n        return _regeneratorRuntime.wrap(function _callee25$(_context25) {\n          while (1) {\n            switch (_context25.prev = _context25.next) {\n              case 0:\n              case \"end\":\n                return _context25.stop();\n            }\n          }\n        }, _callee25);\n      }));\n\n      function addFilterView() {\n        return _addFilterView.apply(this, arguments);\n      }\n\n      return addFilterView;\n    }()\n  }, {\n    key: \"appendCells\",\n    value: function () {\n      var _appendCells = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee26() {\n        return _regeneratorRuntime.wrap(function _callee26$(_context26) {\n          while (1) {\n            switch (_context26.prev = _context26.next) {\n              case 0:\n              case \"end\":\n                return _context26.stop();\n            }\n          }\n        }, _callee26);\n      }));\n\n      function appendCells() {\n        return _appendCells.apply(this, arguments);\n      }\n\n      return appendCells;\n    }()\n  }, {\n    key: \"clearBasicFilter\",\n    value: function () {\n      var _clearBasicFilter = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee27() {\n        return _regeneratorRuntime.wrap(function _callee27$(_context27) {\n          while (1) {\n            switch (_context27.prev = _context27.next) {\n              case 0:\n              case \"end\":\n                return _context27.stop();\n            }\n          }\n        }, _callee27);\n      }));\n\n      function clearBasicFilter() {\n        return _clearBasicFilter.apply(this, arguments);\n      }\n\n      return clearBasicFilter;\n    }()\n  }, {\n    key: \"deleteDimension\",\n    value: function () {\n      var _deleteDimension = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee28() {\n        return _regeneratorRuntime.wrap(function _callee28$(_context28) {\n          while (1) {\n            switch (_context28.prev = _context28.next) {\n              case 0:\n              case \"end\":\n                return _context28.stop();\n            }\n          }\n        }, _callee28);\n      }));\n\n      function deleteDimension() {\n        return _deleteDimension.apply(this, arguments);\n      }\n\n      return deleteDimension;\n    }()\n  }, {\n    key: \"deleteEmbeddedObject\",\n    value: function () {\n      var _deleteEmbeddedObject = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee29() {\n        return _regeneratorRuntime.wrap(function _callee29$(_context29) {\n          while (1) {\n            switch (_context29.prev = _context29.next) {\n              case 0:\n              case \"end\":\n                return _context29.stop();\n            }\n          }\n        }, _callee29);\n      }));\n\n      function deleteEmbeddedObject() {\n        return _deleteEmbeddedObject.apply(this, arguments);\n      }\n\n      return deleteEmbeddedObject;\n    }()\n  }, {\n    key: \"deleteFilterView\",\n    value: function () {\n      var _deleteFilterView = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee30() {\n        return _regeneratorRuntime.wrap(function _callee30$(_context30) {\n          while (1) {\n            switch (_context30.prev = _context30.next) {\n              case 0:\n              case \"end\":\n                return _context30.stop();\n            }\n          }\n        }, _callee30);\n      }));\n\n      function deleteFilterView() {\n        return _deleteFilterView.apply(this, arguments);\n      }\n\n      return deleteFilterView;\n    }()\n  }, {\n    key: \"duplicateFilterView\",\n    value: function () {\n      var _duplicateFilterView = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee31() {\n        return _regeneratorRuntime.wrap(function _callee31$(_context31) {\n          while (1) {\n            switch (_context31.prev = _context31.next) {\n              case 0:\n              case \"end\":\n                return _context31.stop();\n            }\n          }\n        }, _callee31);\n      }));\n\n      function duplicateFilterView() {\n        return _duplicateFilterView.apply(this, arguments);\n      }\n\n      return duplicateFilterView;\n    }()\n  }, {\n    key: \"duplicateSheet\",\n    value: function () {\n      var _duplicateSheet = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee32() {\n        return _regeneratorRuntime.wrap(function _callee32$(_context32) {\n          while (1) {\n            switch (_context32.prev = _context32.next) {\n              case 0:\n              case \"end\":\n                return _context32.stop();\n            }\n          }\n        }, _callee32);\n      }));\n\n      function duplicateSheet() {\n        return _duplicateSheet.apply(this, arguments);\n      }\n\n      return duplicateSheet;\n    }()\n  }, {\n    key: \"findReplace\",\n    value: function () {\n      var _findReplace = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee33() {\n        return _regeneratorRuntime.wrap(function _callee33$(_context33) {\n          while (1) {\n            switch (_context33.prev = _context33.next) {\n              case 0:\n              case \"end\":\n                return _context33.stop();\n            }\n          }\n        }, _callee33);\n      }));\n\n      function findReplace() {\n        return _findReplace.apply(this, arguments);\n      }\n\n      return findReplace;\n    }()\n  }, {\n    key: \"insertDimension\",\n    value: function () {\n      var _insertDimension = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee34() {\n        return _regeneratorRuntime.wrap(function _callee34$(_context34) {\n          while (1) {\n            switch (_context34.prev = _context34.next) {\n              case 0:\n              case \"end\":\n                return _context34.stop();\n            }\n          }\n        }, _callee34);\n      }));\n\n      function insertDimension() {\n        return _insertDimension.apply(this, arguments);\n      }\n\n      return insertDimension;\n    }()\n  }, {\n    key: \"insertRange\",\n    value: function () {\n      var _insertRange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee35() {\n        return _regeneratorRuntime.wrap(function _callee35$(_context35) {\n          while (1) {\n            switch (_context35.prev = _context35.next) {\n              case 0:\n              case \"end\":\n                return _context35.stop();\n            }\n          }\n        }, _callee35);\n      }));\n\n      function insertRange() {\n        return _insertRange.apply(this, arguments);\n      }\n\n      return insertRange;\n    }()\n  }, {\n    key: \"moveDimension\",\n    value: function () {\n      var _moveDimension = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee36() {\n        return _regeneratorRuntime.wrap(function _callee36$(_context36) {\n          while (1) {\n            switch (_context36.prev = _context36.next) {\n              case 0:\n              case \"end\":\n                return _context36.stop();\n            }\n          }\n        }, _callee36);\n      }));\n\n      function moveDimension() {\n        return _moveDimension.apply(this, arguments);\n      }\n\n      return moveDimension;\n    }()\n  }, {\n    key: \"updateEmbeddedObjectPosition\",\n    value: function () {\n      var _updateEmbeddedObjectPosition = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee37() {\n        return _regeneratorRuntime.wrap(function _callee37$(_context37) {\n          while (1) {\n            switch (_context37.prev = _context37.next) {\n              case 0:\n              case \"end\":\n                return _context37.stop();\n            }\n          }\n        }, _callee37);\n      }));\n\n      function updateEmbeddedObjectPosition() {\n        return _updateEmbeddedObjectPosition.apply(this, arguments);\n      }\n\n      return updateEmbeddedObjectPosition;\n    }()\n  }, {\n    key: \"pasteData\",\n    value: function () {\n      var _pasteData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee38() {\n        return _regeneratorRuntime.wrap(function _callee38$(_context38) {\n          while (1) {\n            switch (_context38.prev = _context38.next) {\n              case 0:\n              case \"end\":\n                return _context38.stop();\n            }\n          }\n        }, _callee38);\n      }));\n\n      function pasteData() {\n        return _pasteData.apply(this, arguments);\n      }\n\n      return pasteData;\n    }()\n  }, {\n    key: \"textToColumns\",\n    value: function () {\n      var _textToColumns = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee39() {\n        return _regeneratorRuntime.wrap(function _callee39$(_context39) {\n          while (1) {\n            switch (_context39.prev = _context39.next) {\n              case 0:\n              case \"end\":\n                return _context39.stop();\n            }\n          }\n        }, _callee39);\n      }));\n\n      function textToColumns() {\n        return _textToColumns.apply(this, arguments);\n      }\n\n      return textToColumns;\n    }()\n  }, {\n    key: \"updateFilterView\",\n    value: function () {\n      var _updateFilterView = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee40() {\n        return _regeneratorRuntime.wrap(function _callee40$(_context40) {\n          while (1) {\n            switch (_context40.prev = _context40.next) {\n              case 0:\n              case \"end\":\n                return _context40.stop();\n            }\n          }\n        }, _callee40);\n      }));\n\n      function updateFilterView() {\n        return _updateFilterView.apply(this, arguments);\n      }\n\n      return updateFilterView;\n    }()\n  }, {\n    key: \"deleteRange\",\n    value: function () {\n      var _deleteRange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee41() {\n        return _regeneratorRuntime.wrap(function _callee41$(_context41) {\n          while (1) {\n            switch (_context41.prev = _context41.next) {\n              case 0:\n              case \"end\":\n                return _context41.stop();\n            }\n          }\n        }, _callee41);\n      }));\n\n      function deleteRange() {\n        return _deleteRange.apply(this, arguments);\n      }\n\n      return deleteRange;\n    }()\n  }, {\n    key: \"appendDimension\",\n    value: function () {\n      var _appendDimension = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee42() {\n        return _regeneratorRuntime.wrap(function _callee42$(_context42) {\n          while (1) {\n            switch (_context42.prev = _context42.next) {\n              case 0:\n              case \"end\":\n                return _context42.stop();\n            }\n          }\n        }, _callee42);\n      }));\n\n      function appendDimension() {\n        return _appendDimension.apply(this, arguments);\n      }\n\n      return appendDimension;\n    }()\n  }, {\n    key: \"addConditionalFormatRule\",\n    value: function () {\n      var _addConditionalFormatRule = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee43() {\n        return _regeneratorRuntime.wrap(function _callee43$(_context43) {\n          while (1) {\n            switch (_context43.prev = _context43.next) {\n              case 0:\n              case \"end\":\n                return _context43.stop();\n            }\n          }\n        }, _callee43);\n      }));\n\n      function addConditionalFormatRule() {\n        return _addConditionalFormatRule.apply(this, arguments);\n      }\n\n      return addConditionalFormatRule;\n    }()\n  }, {\n    key: \"updateConditionalFormatRule\",\n    value: function () {\n      var _updateConditionalFormatRule = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee44() {\n        return _regeneratorRuntime.wrap(function _callee44$(_context44) {\n          while (1) {\n            switch (_context44.prev = _context44.next) {\n              case 0:\n              case \"end\":\n                return _context44.stop();\n            }\n          }\n        }, _callee44);\n      }));\n\n      function updateConditionalFormatRule() {\n        return _updateConditionalFormatRule.apply(this, arguments);\n      }\n\n      return updateConditionalFormatRule;\n    }()\n  }, {\n    key: \"deleteConditionalFormatRule\",\n    value: function () {\n      var _deleteConditionalFormatRule = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee45() {\n        return _regeneratorRuntime.wrap(function _callee45$(_context45) {\n          while (1) {\n            switch (_context45.prev = _context45.next) {\n              case 0:\n              case \"end\":\n                return _context45.stop();\n            }\n          }\n        }, _callee45);\n      }));\n\n      function deleteConditionalFormatRule() {\n        return _deleteConditionalFormatRule.apply(this, arguments);\n      }\n\n      return deleteConditionalFormatRule;\n    }()\n  }, {\n    key: \"sortRange\",\n    value: function () {\n      var _sortRange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee46() {\n        return _regeneratorRuntime.wrap(function _callee46$(_context46) {\n          while (1) {\n            switch (_context46.prev = _context46.next) {\n              case 0:\n              case \"end\":\n                return _context46.stop();\n            }\n          }\n        }, _callee46);\n      }));\n\n      function sortRange() {\n        return _sortRange.apply(this, arguments);\n      }\n\n      return sortRange;\n    }()\n  }, {\n    key: \"setDataValidation\",\n    value: function () {\n      var _setDataValidation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee47() {\n        return _regeneratorRuntime.wrap(function _callee47$(_context47) {\n          while (1) {\n            switch (_context47.prev = _context47.next) {\n              case 0:\n              case \"end\":\n                return _context47.stop();\n            }\n          }\n        }, _callee47);\n      }));\n\n      function setDataValidation() {\n        return _setDataValidation.apply(this, arguments);\n      }\n\n      return setDataValidation;\n    }()\n  }, {\n    key: \"setBasicFilter\",\n    value: function () {\n      var _setBasicFilter = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee48() {\n        return _regeneratorRuntime.wrap(function _callee48$(_context48) {\n          while (1) {\n            switch (_context48.prev = _context48.next) {\n              case 0:\n              case \"end\":\n                return _context48.stop();\n            }\n          }\n        }, _callee48);\n      }));\n\n      function setBasicFilter() {\n        return _setBasicFilter.apply(this, arguments);\n      }\n\n      return setBasicFilter;\n    }()\n  }, {\n    key: \"addProtectedRange\",\n    value: function () {\n      var _addProtectedRange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee49() {\n        return _regeneratorRuntime.wrap(function _callee49$(_context49) {\n          while (1) {\n            switch (_context49.prev = _context49.next) {\n              case 0:\n              case \"end\":\n                return _context49.stop();\n            }\n          }\n        }, _callee49);\n      }));\n\n      function addProtectedRange() {\n        return _addProtectedRange.apply(this, arguments);\n      }\n\n      return addProtectedRange;\n    }()\n  }, {\n    key: \"updateProtectedRange\",\n    value: function () {\n      var _updateProtectedRange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee50() {\n        return _regeneratorRuntime.wrap(function _callee50$(_context50) {\n          while (1) {\n            switch (_context50.prev = _context50.next) {\n              case 0:\n              case \"end\":\n                return _context50.stop();\n            }\n          }\n        }, _callee50);\n      }));\n\n      function updateProtectedRange() {\n        return _updateProtectedRange.apply(this, arguments);\n      }\n\n      return updateProtectedRange;\n    }()\n  }, {\n    key: \"deleteProtectedRange\",\n    value: function () {\n      var _deleteProtectedRange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee51() {\n        return _regeneratorRuntime.wrap(function _callee51$(_context51) {\n          while (1) {\n            switch (_context51.prev = _context51.next) {\n              case 0:\n              case \"end\":\n                return _context51.stop();\n            }\n          }\n        }, _callee51);\n      }));\n\n      function deleteProtectedRange() {\n        return _deleteProtectedRange.apply(this, arguments);\n      }\n\n      return deleteProtectedRange;\n    }()\n  }, {\n    key: \"autoResizeDimensions\",\n    value: function () {\n      var _autoResizeDimensions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee52() {\n        return _regeneratorRuntime.wrap(function _callee52$(_context52) {\n          while (1) {\n            switch (_context52.prev = _context52.next) {\n              case 0:\n              case \"end\":\n                return _context52.stop();\n            }\n          }\n        }, _callee52);\n      }));\n\n      function autoResizeDimensions() {\n        return _autoResizeDimensions.apply(this, arguments);\n      }\n\n      return autoResizeDimensions;\n    }()\n  }, {\n    key: \"addChart\",\n    value: function () {\n      var _addChart = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee53() {\n        return _regeneratorRuntime.wrap(function _callee53$(_context53) {\n          while (1) {\n            switch (_context53.prev = _context53.next) {\n              case 0:\n              case \"end\":\n                return _context53.stop();\n            }\n          }\n        }, _callee53);\n      }));\n\n      function addChart() {\n        return _addChart.apply(this, arguments);\n      }\n\n      return addChart;\n    }()\n  }, {\n    key: \"updateChartSpec\",\n    value: function () {\n      var _updateChartSpec = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee54() {\n        return _regeneratorRuntime.wrap(function _callee54$(_context54) {\n          while (1) {\n            switch (_context54.prev = _context54.next) {\n              case 0:\n              case \"end\":\n                return _context54.stop();\n            }\n          }\n        }, _callee54);\n      }));\n\n      function updateChartSpec() {\n        return _updateChartSpec.apply(this, arguments);\n      }\n\n      return updateChartSpec;\n    }()\n  }, {\n    key: \"updateBanding\",\n    value: function () {\n      var _updateBanding = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee55() {\n        return _regeneratorRuntime.wrap(function _callee55$(_context55) {\n          while (1) {\n            switch (_context55.prev = _context55.next) {\n              case 0:\n              case \"end\":\n                return _context55.stop();\n            }\n          }\n        }, _callee55);\n      }));\n\n      function updateBanding() {\n        return _updateBanding.apply(this, arguments);\n      }\n\n      return updateBanding;\n    }()\n  }, {\n    key: \"addBanding\",\n    value: function () {\n      var _addBanding = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee56() {\n        return _regeneratorRuntime.wrap(function _callee56$(_context56) {\n          while (1) {\n            switch (_context56.prev = _context56.next) {\n              case 0:\n              case \"end\":\n                return _context56.stop();\n            }\n          }\n        }, _callee56);\n      }));\n\n      function addBanding() {\n        return _addBanding.apply(this, arguments);\n      }\n\n      return addBanding;\n    }()\n  }, {\n    key: \"deleteBanding\",\n    value: function () {\n      var _deleteBanding = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee57() {\n        return _regeneratorRuntime.wrap(function _callee57$(_context57) {\n          while (1) {\n            switch (_context57.prev = _context57.next) {\n              case 0:\n              case \"end\":\n                return _context57.stop();\n            }\n          }\n        }, _callee57);\n      }));\n\n      function deleteBanding() {\n        return _deleteBanding.apply(this, arguments);\n      }\n\n      return deleteBanding;\n    }()\n  }, {\n    key: \"createDeveloperMetadata\",\n    value: function () {\n      var _createDeveloperMetadata = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee58() {\n        return _regeneratorRuntime.wrap(function _callee58$(_context58) {\n          while (1) {\n            switch (_context58.prev = _context58.next) {\n              case 0:\n              case \"end\":\n                return _context58.stop();\n            }\n          }\n        }, _callee58);\n      }));\n\n      function createDeveloperMetadata() {\n        return _createDeveloperMetadata.apply(this, arguments);\n      }\n\n      return createDeveloperMetadata;\n    }()\n  }, {\n    key: \"updateDeveloperMetadata\",\n    value: function () {\n      var _updateDeveloperMetadata = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee59() {\n        return _regeneratorRuntime.wrap(function _callee59$(_context59) {\n          while (1) {\n            switch (_context59.prev = _context59.next) {\n              case 0:\n              case \"end\":\n                return _context59.stop();\n            }\n          }\n        }, _callee59);\n      }));\n\n      function updateDeveloperMetadata() {\n        return _updateDeveloperMetadata.apply(this, arguments);\n      }\n\n      return updateDeveloperMetadata;\n    }()\n  }, {\n    key: \"deleteDeveloperMetadata\",\n    value: function () {\n      var _deleteDeveloperMetadata = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee60() {\n        return _regeneratorRuntime.wrap(function _callee60$(_context60) {\n          while (1) {\n            switch (_context60.prev = _context60.next) {\n              case 0:\n              case \"end\":\n                return _context60.stop();\n            }\n          }\n        }, _callee60);\n      }));\n\n      function deleteDeveloperMetadata() {\n        return _deleteDeveloperMetadata.apply(this, arguments);\n      }\n\n      return deleteDeveloperMetadata;\n    }()\n  }, {\n    key: \"randomizeRange\",\n    value: function () {\n      var _randomizeRange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee61() {\n        return _regeneratorRuntime.wrap(function _callee61$(_context61) {\n          while (1) {\n            switch (_context61.prev = _context61.next) {\n              case 0:\n              case \"end\":\n                return _context61.stop();\n            }\n          }\n        }, _callee61);\n      }));\n\n      function randomizeRange() {\n        return _randomizeRange.apply(this, arguments);\n      }\n\n      return randomizeRange;\n    }()\n  }, {\n    key: \"addDimensionGroup\",\n    value: function () {\n      var _addDimensionGroup = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee62() {\n        return _regeneratorRuntime.wrap(function _callee62$(_context62) {\n          while (1) {\n            switch (_context62.prev = _context62.next) {\n              case 0:\n              case \"end\":\n                return _context62.stop();\n            }\n          }\n        }, _callee62);\n      }));\n\n      function addDimensionGroup() {\n        return _addDimensionGroup.apply(this, arguments);\n      }\n\n      return addDimensionGroup;\n    }()\n  }, {\n    key: \"deleteDimensionGroup\",\n    value: function () {\n      var _deleteDimensionGroup = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee63() {\n        return _regeneratorRuntime.wrap(function _callee63$(_context63) {\n          while (1) {\n            switch (_context63.prev = _context63.next) {\n              case 0:\n              case \"end\":\n                return _context63.stop();\n            }\n          }\n        }, _callee63);\n      }));\n\n      function deleteDimensionGroup() {\n        return _deleteDimensionGroup.apply(this, arguments);\n      }\n\n      return deleteDimensionGroup;\n    }()\n  }, {\n    key: \"updateDimensionGroup\",\n    value: function () {\n      var _updateDimensionGroup = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee64() {\n        return _regeneratorRuntime.wrap(function _callee64$(_context64) {\n          while (1) {\n            switch (_context64.prev = _context64.next) {\n              case 0:\n              case \"end\":\n                return _context64.stop();\n            }\n          }\n        }, _callee64);\n      }));\n\n      function updateDimensionGroup() {\n        return _updateDimensionGroup.apply(this, arguments);\n      }\n\n      return updateDimensionGroup;\n    }()\n  }, {\n    key: \"trimWhitespace\",\n    value: function () {\n      var _trimWhitespace = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee65() {\n        return _regeneratorRuntime.wrap(function _callee65$(_context65) {\n          while (1) {\n            switch (_context65.prev = _context65.next) {\n              case 0:\n              case \"end\":\n                return _context65.stop();\n            }\n          }\n        }, _callee65);\n      }));\n\n      function trimWhitespace() {\n        return _trimWhitespace.apply(this, arguments);\n      }\n\n      return trimWhitespace;\n    }()\n  }, {\n    key: \"deleteDuplicates\",\n    value: function () {\n      var _deleteDuplicates = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee66() {\n        return _regeneratorRuntime.wrap(function _callee66$(_context66) {\n          while (1) {\n            switch (_context66.prev = _context66.next) {\n              case 0:\n              case \"end\":\n                return _context66.stop();\n            }\n          }\n        }, _callee66);\n      }));\n\n      function deleteDuplicates() {\n        return _deleteDuplicates.apply(this, arguments);\n      }\n\n      return deleteDuplicates;\n    }()\n  }, {\n    key: \"addSlicer\",\n    value: function () {\n      var _addSlicer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee67() {\n        return _regeneratorRuntime.wrap(function _callee67$(_context67) {\n          while (1) {\n            switch (_context67.prev = _context67.next) {\n              case 0:\n              case \"end\":\n                return _context67.stop();\n            }\n          }\n        }, _callee67);\n      }));\n\n      function addSlicer() {\n        return _addSlicer.apply(this, arguments);\n      }\n\n      return addSlicer;\n    }()\n  }, {\n    key: \"updateSlicerSpec\",\n    value: function () {\n      var _updateSlicerSpec = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee68() {\n        return _regeneratorRuntime.wrap(function _callee68$(_context68) {\n          while (1) {\n            switch (_context68.prev = _context68.next) {\n              case 0:\n              case \"end\":\n                return _context68.stop();\n            }\n          }\n        }, _callee68);\n      }));\n\n      function updateSlicerSpec() {\n        return _updateSlicerSpec.apply(this, arguments);\n      }\n\n      return updateSlicerSpec;\n    }() // delete this worksheet\n\n  }, {\n    key: \"delete\",\n    value: function () {\n      var _delete2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee69() {\n        return _regeneratorRuntime.wrap(function _callee69$(_context69) {\n          while (1) {\n            switch (_context69.prev = _context69.next) {\n              case 0:\n                return _context69.abrupt(\"return\", this._spreadsheet.deleteSheet(this.sheetId));\n\n              case 1:\n              case \"end\":\n                return _context69.stop();\n            }\n          }\n        }, _callee69, this);\n      }));\n\n      function _delete() {\n        return _delete2.apply(this, arguments);\n      }\n\n      return _delete;\n    }()\n  }, {\n    key: \"del\",\n    value: function () {\n      var _del = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee70() {\n        return _regeneratorRuntime.wrap(function _callee70$(_context70) {\n          while (1) {\n            switch (_context70.prev = _context70.next) {\n              case 0:\n                return _context70.abrupt(\"return\", this.delete());\n\n              case 1:\n              case \"end\":\n                return _context70.stop();\n            }\n          }\n        }, _callee70, this);\n      }));\n\n      function del() {\n        return _del.apply(this, arguments);\n      }\n\n      return del;\n    }() // alias to mimic old interface\n    // copies this worksheet into another document/spreadsheet\n\n  }, {\n    key: \"copyToSpreadsheet\",\n    value: function () {\n      var _copyToSpreadsheet = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee71(destinationSpreadsheetId) {\n        return _regeneratorRuntime.wrap(function _callee71$(_context71) {\n          while (1) {\n            switch (_context71.prev = _context71.next) {\n              case 0:\n                return _context71.abrupt(\"return\", this._spreadsheet.axios.post(\"/sheets/\".concat(this.sheetId, \":copyTo\"), {\n                  destinationSpreadsheetId: destinationSpreadsheetId\n                }));\n\n              case 1:\n              case \"end\":\n                return _context71.stop();\n            }\n          }\n        }, _callee71, this);\n      }));\n\n      function copyToSpreadsheet(_x19) {\n        return _copyToSpreadsheet.apply(this, arguments);\n      }\n\n      return copyToSpreadsheet;\n    }()\n  }, {\n    key: \"clear\",\n    value: function () {\n      var _clear = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee72() {\n        return _regeneratorRuntime.wrap(function _callee72$(_context72) {\n          while (1) {\n            switch (_context72.prev = _context72.next) {\n              case 0:\n                _context72.next = 2;\n                return this._spreadsheet.axios.post(\"/values/\".concat(this.encodedA1SheetName, \":clear\"));\n\n              case 2:\n                this.resetLocalCache(true);\n\n              case 3:\n              case \"end\":\n                return _context72.stop();\n            }\n          }\n        }, _callee72, this);\n      }));\n\n      function clear() {\n        return _clear.apply(this, arguments);\n      }\n\n      return clear;\n    }()\n  }]);\n\n  return GoogleSpreadsheetWorksheet;\n}();\n\nmodule.exports = GoogleSpreadsheetWorksheet;","map":null,"metadata":{},"sourceType":"script"}