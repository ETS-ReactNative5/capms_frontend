import { GanttItem, GanttLink, StringHash, Response, MovePosition } from "types";
interface AfterUpdateConfig<T> {
    task?: {
        (id: string, response: T): void;
    };
    link?: {
        (id: string, response: T): void;
    };
}
export default class RestDataProvider<T extends Response> {
    private _url;
    private _queue;
    private _updates;
    private _ids;
    constructor(url: string, updates: AfterUpdateConfig<T>);
    getData(): Promise<{
        tasks: GanttItem[];
        links: GanttLink[];
    }>;
    serializeTask(task: GanttItem): StringHash<number | string>;
    serializeMove(obj: MovePosition): StringHash<number | string>;
    serializeLink(link: GanttLink): StringHash<number | string>;
    dateFormat(a: string | Date): string;
    saveData(ev: {
        action: string;
        obj: GanttItem | GanttLink | MovePosition;
        mode?: string;
    }): void;
    send(url: string, method: string, body?: StringHash<number | string>): Promise<T>;
}
export {};
